var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
import { Empty } from './Empty';
import { Option } from './Option';
import { Loading } from './Loading';
/**
 * Options
 *  Component that decides between what to display
 *   - EmptyMessage
 *   - LoadingMessage
 *   - List<Options>
 */
export function Options(props) {
    const { show, options = [], testId, loading = false, optionClass = '', className = '', } = props;
    const renderOption = (_a) => {
        var { id, label } = _a, rest = __rest(_a, ["id", "label"]);
        return (_jsx(Option, Object.assign({ id: id, label: label, testId: testId, className: optionClass, onSelect: props.onSelect }, rest), rest.value));
    };
    const renderOptions = () => {
        if (loading) {
            return _jsx(Loading, { testId: testId });
        }
        if (options.length) {
            return props.options.map(renderOption);
        }
        else {
            return _jsx(Empty, { testId: testId });
        }
    };
    const optionsTestId = `${testId}_options`;
    if (show) {
        return (_jsx("ul", Object.assign({ className: className, "data-testid": optionsTestId }, { children: renderOptions() })));
    }
    else {
        return null;
    }
}
//# sourceMappingURL=Options.js.map