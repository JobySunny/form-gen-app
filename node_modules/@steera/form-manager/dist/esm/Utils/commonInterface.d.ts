export declare enum Layout {
    row = "row",
    colunn = "column"
}
/**
 * Different Types of Components Handled by FormGenerator
 */
export declare enum FormGeneratorComponentTypes {
    ADD_NEW = "ADD_NEW",
    FLEX_ROW = "FLEX_ROW",
    EMAIL_BOX = "EMAIL_BOX",
    FLEX_COLUMN = "FLEX_COLUMN",
    PASSWORD_BOX = "PASSWORD_BOX",
    NUMBER_BOX = "NUMBER_BOX",
    TEXT_BOX = "TEXT_BOX"
}
/**
 * Different Types of Components Handled by FormRenderer
 */
export declare enum FormRendererComponentTypes {
    FLEX_ROW = "FLEX_ROW",
    EMAIL_BOX = "EMAIL_BOX",
    FLEX_COLUMN = "FLEX_COLUMN",
    PASSWORD_BOX = "PASSWORD_BOX",
    NUMBER_BOX = "NUMBER_BOX",
    TEXT_BOX = "TEXT_BOX"
}
/**
 * Definition for a SingleTemplateElement FormGenerator
 */
export interface FormGeneratorTemplateElement {
    /**
     * Generic of the component
     */
    title: string;
    /**
     * Path to point to the element
     */
    path: string;
    /**
     * Type of component to show in Element
     */
    type: FormGeneratorComponentTypes;
    /**
     * List of configurable options in Elment
     */
    options: {
        [key: string]: any;
    };
    /**
     * Child elements to associate with element
     */
    children?: Array<FormGeneratorTemplateElement>;
}
/**
 * Definition for a SingleTemplateElement FormRenderer
 */
export interface FormRendererTemplateElement extends Omit<FormGeneratorTemplateElement, 'type' | 'children'> {
    /**
     * Type of component to show in Element
     */
    type: FormRendererComponentTypes;
    /**
     * Child elements to associate with element
     */
    children: Array<FormRendererTemplateElement>;
}
//# sourceMappingURL=commonInterface.d.ts.map