/**
 * Unique Path Key to identify a Component
 */
export declare enum ComponentPath {
    box = "box",
    addnew = "addnew",
    textbox = "textbox",
    fieldset = "fieldset",
    emailbox = "emailbox",
    radiobox = "radiobox",
    checkbox = "checkbox",
    selectbox = "selectbox",
    numberbox = "numberbox",
    passwordbox = "passwordbox",
    flexrow = "flexrow",
    flexcolumn = "flexcolumn"
}
/**
 * PATH:
 * A path is a string that when parsed could give you a unique
 * pathway to a particular element in template object
 *
 * Eg: '0-flexcolumn/0-flexrow/0-addnew'
 *  - This path points to the ADD_NEW component, that is sitting inside a
 *   flexrow component which is sitting inside a flewcolumn component
 *
 *  '0-flexcolumn':
 *  * the FLEX_COLUMN component is sitting in the 0th index of its parent component
 *  '0-flexrow':
 *  * the FLEX_ROW component is sitting in the 0th index of its parent component
 *  '0-addnew':
 *  * the ADD_NEW component is sitting in the 0th index of its parent component
 *
 * pathNode
 * A single path entity separated by INDEX_COMPONENT_DELIMITER { default '-'}
 * Eg: '0-addnew'
 *
 * Path.indexDelimiter
 * A separator for index of item in children array and ComponentPath
 *
 * Path.nodeDelimiter
 * A separator between 2 PATH NODE's
 *
 */
export declare type Index = number | string;
export declare type PathKey = string;
export declare type IndexDelimiter = string;
export declare type NodeDelimiter = string;
export declare type PathNode = string;
export declare type PathType = string;
export declare class Path {
    private static readonly indexDelimiter;
    private static readonly nodeDelimiter;
    /**
     * makePathNode
     *  Creates a single pathNode Entity
     */
    static makePathNode(pathKey: PathKey, index: Index): PathNode;
    /**
     * makePath
     *  Add a new node to existing Path
     */
    static addNodeToPath(currentPath: PathType, pathNode: PathNode): PathType;
    /**
     * parseToNodes
     *  parse full path to pathNodes
     */
    static parseToNodes(currentPath: PathType): Array<PathNode>;
    /**
     * parseToIndex
     *  parse pathNode to index & ComponentPath
     */
    static parseToIndex(pathNode: PathNode): [Index, PathKey];
    /**
     * parseFullPath
     *  parse a path to Path[ PathNode[Index,PathKey], PathNode[Index, PathKey]]
     */
    static parseFullPath(currentPath: PathType): Array<[Index, PathKey]>;
    /**
     * mergePathNodes
     *  merge PathNodes[] to Path
     */
    static mergePathNodes(pathNodes: Array<PathNode>): PathType;
    /**
     * getSelectedPathKey
     *  get the pathKey of selected element in selecteElementPath
     */
    static getSelectedPathKey(currentPath: PathType): PathKey;
}
//# sourceMappingURL=pathUtils.d.ts.map