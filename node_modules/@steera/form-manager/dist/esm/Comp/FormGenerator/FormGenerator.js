import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { Provider, useAppSelector } from './StoreProvider';
import { Reducer, initialState, Action, Selector } from './Store';
import { Header } from './Header';
import { FormCanvas } from './FormCanvas';
import { ChooseComponent } from './ChooseComponent';
import { ConfigureComponent } from './ConfigureComponent';
import cn from './FormGenerator.module.scss';
function Component(props) {
    const selectedNodePath = useAppSelector(Selector.getSelectedNodePath);
    const renderSideBarContent = () => {
        if (selectedNodePath) {
            return _jsx(ConfigureComponent, { selectedNodePath: selectedNodePath });
        }
        else {
            return _jsx(ChooseComponent, {});
        }
    };
    return (_jsxs("div", Object.assign({ className: cn.container }, { children: [_jsx(Header, { onExport: props.onExport }), _jsxs("div", Object.assign({ className: cn.content }, { children: [_jsx("section", Object.assign({ className: cn.content_left }, { children: renderSideBarContent() })), _jsx("section", Object.assign({ className: cn.content_right }, { children: _jsx(FormCanvas, {}) }))] }))] })));
}
/*
 * FormGenerator:
 *  - FullScreen component to generator new form templates or edit exiting form templates passed to it as props
 */
export function FormGenerator(props) {
    const [state, dispatch] = React.useReducer(Reducer, initialState);
    React.useEffect(() => {
        if (props.template)
            dispatch(Action.propsChange({ template: props.template, templateName: props.name }));
    }, [props.template, props.name]);
    return (_jsx(Provider, Object.assign({ value: { state, dispatch } }, { children: _jsx(Component, { onExport: props.onExport }) })));
}
//# sourceMappingURL=FormGenerator.js.map