import { jsx as _jsx } from "react/jsx-runtime";
import { Selector } from '../Store';
import { useAppSelector } from '../StoreProvider';
import { ComponentPath } from '../../Comp.interface';
import { AddNew, Box, EmailBox, PasswordBox, TextBox, NumberBox, DateBox, RadioBox, CheckBox, SelectBox, Fieldset, Title, } from '../RenderComponents';
import cn from './FormCanvas.module.scss';
export function FormCanvas(props) {
    const template = useAppSelector(Selector.getTemplate);
    const isPreview = useAppSelector(Selector.getIsPreview);
    const renderAddNew = (c) => {
        return isPreview ? null : (_jsx(AddNew, { title: c.title, path: c.path, pathId: c.pathId }, c.path));
    };
    const renderBox = (c) => (_jsx(Box, Object.assign({ path: c.path, title: c.title, pathId: c.pathId, options: c.options }, { children: c.children.map(renderTemplateComponent) }), c.path));
    const renderEmailBox = (c) => (_jsx(EmailBox, { path: c.path, title: c.title, pathId: c.pathId, options: c.options }, c.path));
    const renderTextBox = (c) => (_jsx(TextBox, { path: c.path, title: c.title, pathId: c.pathId, options: c.options }, c.path));
    const renderPasswordBox = (c) => (_jsx(PasswordBox, { path: c.path, title: c.title, pathId: c.pathId, options: c.options }, c.path));
    const renderNumberBox = (c) => (_jsx(NumberBox, { path: c.path, title: c.title, pathId: c.pathId, options: c.options }, c.path));
    const renderDateBox = (c) => (_jsx(DateBox, { path: c.path, title: c.title, pathId: c.pathId, options: c.options }, c.path));
    const renderRadioBox = (c) => (_jsx(RadioBox, { path: c.path, title: c.title, pathId: c.pathId, options: c.options }, c.path));
    const renderCheckBox = (c) => (_jsx(CheckBox, { path: c.path, title: c.title, pathId: c.pathId, options: c.options }, c.path));
    const renderSelectBox = (c) => (_jsx(SelectBox, { path: c.path, title: c.title, pathId: c.pathId, options: c.options }, c.path));
    const renderFieldset = (c) => (_jsx(Fieldset, Object.assign({ path: c.path, title: c.title, pathId: c.pathId, options: c.options }, { children: c.children.map(renderTemplateComponent) }), c.path));
    const renderTitle = (c) => (_jsx(Title, { path: c.path, title: c.title, pathId: c.pathId, options: c.options }, c.path));
    const renderTemplateComponent = (c) => {
        switch (c.pathId) {
            case ComponentPath.box:
                return renderBox(c);
            case ComponentPath.addnew:
                return renderAddNew(c);
            case ComponentPath.emailbox:
                return renderEmailBox(c);
            case ComponentPath.textbox:
                return renderTextBox(c);
            case ComponentPath.passwordbox:
                return renderPasswordBox(c);
            case ComponentPath.numberbox:
                return renderNumberBox(c);
            case ComponentPath.datebox:
                return renderDateBox(c);
            case ComponentPath.radiobox:
                return renderRadioBox(c);
            case ComponentPath.checkbox:
                return renderCheckBox(c);
            case ComponentPath.selectbox:
                return renderSelectBox(c);
            case ComponentPath.fieldset:
                return renderFieldset(c);
            case ComponentPath.title:
                return renderTitle(c);
            default:
                return null;
        }
    };
    return (_jsx("div", Object.assign({ className: cn.card }, { children: _jsx("div", Object.assign({ className: cn.canvas }, { children: template.map(renderTemplateComponent) })) })));
}
//# sourceMappingURL=FormCanvas.js.map