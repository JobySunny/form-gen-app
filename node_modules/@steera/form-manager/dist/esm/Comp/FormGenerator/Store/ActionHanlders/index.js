import { getParentByPath, addNewNodeInParent, removeFromParentNode, } from '../Helpers';
import { getSelectedElement } from '../Store.utils';
import { INPUT } from '../../../../Utils/constants';
export function onPropsChange(state, payload) {
    state.template = payload.template;
    state.templateName = payload.templateName;
    return state;
}
export function onTogglePreview(state) {
    state.isPreview = !state.isPreview;
}
export function onAddToCanvas(state, payload) {
    const parent = getParentByPath(state.template, payload.placePath);
    if (parent) {
        addNewNodeInParent(parent, payload.pathId);
    }
}
export function onSelectComponent(state, payload) {
    state.selectedNodePath = payload;
}
export function onUpdateOptionItem(state, payload) {
    const selectedNode = getSelectedElement(state);
    if ((selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === INPUT.TEXT ||
        (selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === INPUT.NUMBER ||
        (selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === INPUT.DATE) {
        selectedNode.options[payload.name].input.value = payload.value;
    }
    if ((selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === INPUT.SELECT) {
        selectedNode.options[payload.name].input.value = payload.value;
    }
    if ((selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === INPUT.TABLE) {
        selectedNode.options[payload.name].input.optionItems = payload.options;
    }
    if ((selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === INPUT.CHECKBOX) {
        selectedNode.options[payload.name].input.checked = payload.checked;
    }
}
export function onCloseConfigSection(state) {
    state.selectedNodePath = '';
}
export function onDeleteNode(state) {
    const parent = getParentByPath(state.template, state.selectedNodePath);
    if (parent) {
        removeFromParentNode(parent, state.selectedNodePath);
    }
    state.selectedNodePath = '';
}
export function onChangeTemplateName(state, payload) {
    state.templateName = payload;
    return state;
}
//# sourceMappingURL=index.js.map