import { Path } from '../../../../Utils/pathUtils';
export function removeFromParentNode(node, path) {
    node.children = node.children
        .filter((n) => !(n.path === path))
        .map((child, i) => {
        child.path = Path.addNodeToPath(node.path, Path.makePathNode(child.pathId, i));
        if (child.children.length) {
            child.children = child.children.map(recursivelyChangePath(child.path));
        }
        return child;
    });
    return node;
}
function recursivelyChangePath(parentPath) {
    return (node, index) => {
        node.path = Path.addNodeToPath(parentPath, Path.makePathNode(node.pathId, index));
        if (node.children.length) {
            node.children = node.children.map(recursivelyChangePath(node.path));
        }
        return node;
    };
}
//# sourceMappingURL=removeNodeFromParent.js.map