import { Path } from '../../../../Utils/pathUtils';
import { ComponentConfig } from '../../../Comp.config';
import { ComponentPath } from '../../../Comp.interface';
// list of components that need ComponentPath.addnew as child
const NEED_ADD_NEW_CHILD = [ComponentPath.box, ComponentPath.fieldset];
export function addNewNodeInParent(parent, pathId) {
    const index = parent.children.findIndex((child) => child.pathId === ComponentPath.addnew);
    if (index > 0 || index === 0) {
        parent.children[index] = Object.assign(Object.assign(Object.assign({}, parent.children[index]), ComponentConfig[pathId]), { path: Path.addNodeToPath(parent.path, Path.makePathNode(pathId, index)) });
    }
    /*
      If pathId is of newly added Component
      is ComponentPath.box | ComponentPath.fieldset
      need to add Component.addnew as initial child
    */
    if (NEED_ADD_NEW_CHILD.includes(parent.children[index].pathId)) {
        parent.children[index].children.push(Object.assign(Object.assign({}, ComponentConfig.addnew), { children: [], path: Path.addNodeToPath(parent.children[index].path, Path.makePathNode(ComponentConfig.addnew.pathId, parent.children[index].children.length)) }));
    }
    /*
      If parent is of newly added Component
      is ComponentPath.box | ComponentPath.fieldset
      need to add Component.addnew as final child
    */
    if (NEED_ADD_NEW_CHILD.includes(parent.pathId)) {
        parent.children.push(Object.assign(Object.assign({}, ComponentConfig.addnew), { children: [], path: Path.addNodeToPath(parent.path, Path.makePathNode(ComponentConfig.addnew.pathId, parent.children.length)) }));
    }
}
//# sourceMappingURL=addNewNodeInParent.js.map