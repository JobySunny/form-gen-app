import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
import { useAppDispatch, useAppSelector } from '../StoreProvider';
import { Selector, Action } from '../Store';
import { Input } from './Input';
import { INPUT } from '../../../Utils/constants';
import { Checkbox } from './Checkbox';
import { Select } from './Select';
import { Label } from '../../../Components/Label';
import { Option } from './Option';
import { Table } from './Table';
import { Path } from '../../../Utils/pathUtils';
import cn from './ConfigureComponent.module.scss';
export function ConfigureComponent(props) {
    const component = useAppSelector(Selector.getSelectedNode);
    const selectedNodePath = useAppSelector(Selector.getSelectedNodePath);
    const dispatch = useAppDispatch();
    const renderTextInput = (o, key) => (_jsxs(Option, Object.assign({ className: cn.conInp_list__opt }, { children: [_jsx(Label, { text: o.title, for: key, className: cn.label, required: o.input.required }, `${key}_label`), _jsx(Input, { id: key, name: key, type: o.input.type, disabled: o.input.disabled, maxLength: o.input.maxLength, minLength: o.input.minLength, value: o.input.value, required: o.input.required }, `${key}_input`)] }), key));
    const renderNumberInput = (o, key) => (_jsxs(Option, Object.assign({ className: cn.conInp_list__opt }, { children: [_jsx(Label, { text: o.title, for: key, className: cn.label, required: o.input.required }, `${key}_label`), _jsx(Input, { id: key, name: key, type: o.input.type, max: o.input.max, min: o.input.min, value: o.input.value, required: o.input.required, disabled: o.input.disabled }, `${key}_input`)] }), key));
    const renderCheck = (o, key) => (_jsxs(Option, Object.assign({ className: cn.conInp_list__opt }, { children: [_jsx(Label, { text: o.title, for: key, className: cn.label, required: o.input.required }, `${key}_label`), _jsx(Checkbox, { id: key, name: key, type: o.input.type, value: o.input.value, required: o.input.required, disabled: o.input.disabled, checked: o.input.checked }, `${key}_input`)] }), key));
    const renderSelect = (o, key) => (_jsxs(Option, Object.assign({ className: cn.conInp_list__opt }, { children: [_jsx(Label, { text: o.title, for: key, className: cn.label, required: o.input.required }, `${key}_label`), _jsx(Select, { id: key, name: key, options: o.input.options, required: o.input.required, value: o.input.value, disabled: o.input.disabled }, `${key}_input`)] }), key));
    const renderTable = (o, key) => (_jsx(Option, Object.assign({ className: cn.conInp_list__opt }, { children: _jsx(Table, { title: o.title, columns: o.input.columns, optionItems: o.input.optionItems }, `${key}_table`) }), key));
    const renderOption = (option, key) => {
        switch (option.input.type) {
            case INPUT.TEXT:
                return renderTextInput(option, key);
            case INPUT.NUMBER:
            case INPUT.DATE:
                return renderNumberInput(option, key);
            case INPUT.CHECKBOX:
                return renderCheck(option, key);
            case INPUT.SELECT:
                return renderSelect(option, key);
            case INPUT.TABLE:
                return renderTable(option, key);
            default:
                return null;
        }
    };
    const optionKey = (key) => renderOption(component.options[key], key);
    const onClickClose = () => {
        dispatch(Action.closeConfigWindow());
    };
    const canDelete = React.useMemo(() => Path.parseToNodes(selectedNodePath).length > 1, [selectedNodePath]);
    const onClickDelete = () => {
        if (canDelete) {
            dispatch(Action.deleteNode());
        }
    };
    const trashClass = `${cn.trash} ${canDelete ? '' : cn.disabled}`;
    return (_jsxs("div", Object.assign({ className: cn.conInp }, { children: [_jsxs("div", Object.assign({ className: cn.conInp_head }, { children: [_jsx("p", Object.assign({ className: cn.title }, { children: component.title })), _jsx("div", Object.assign({ onClick: onClickDelete, className: trashClass }, { children: "\uD83D\uDDD1\uFE0F" })), _jsx("div", Object.assign({ onClick: onClickClose, className: cn.cross }, { children: "\u274C" }))] })), _jsx("ul", Object.assign({ className: cn.conInp_list }, { children: Object.keys(component.options).map(optionKey) }))] })));
}
//# sourceMappingURL=ConfigureComponent.js.map