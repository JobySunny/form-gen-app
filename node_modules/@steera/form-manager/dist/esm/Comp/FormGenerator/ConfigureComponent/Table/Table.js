import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import React from 'react';
import { useAppDispatch } from '../../StoreProvider';
import { Action } from '../../Store';
import { getThrottle } from '../../../../Utils/commonUtils';
import cn from './Table.module.scss';
export function Table(props) {
    const dispatch = useAppDispatch();
    const throttle = getThrottle('tableChange');
    const [options, setOptions] = React.useState([]);
    let obj = JSON.parse(JSON.stringify(options));
    React.useEffect(() => {
        setOptions(props.optionItems);
    }, [props.optionItems]);
    const onOptionChange = (id) => (e) => {
        setOptions((options) => options.map((op, i) => {
            if (i === id) {
                return Object.assign(Object.assign({}, op), { [e.target.name]: e.target.value });
            }
            else {
                return op;
            }
        }));
    };
    React.useEffect(() => {
        throttle(() => {
            dispatch(Action.updateOptionItem({ name: 'options', options }));
        });
    }, [options]);
    const addnew = (id) => (e) => {
        obj.splice(id + 1, 0, { label: 'option', value: 'value' });
        setOptions(obj);
    };
    const deleterow = (id) => (e) => {
        if (obj.length > 1) {
            obj.splice(id, 1);
            setOptions(obj);
        }
    };
    const renderOptions = (opt, id) => (_jsxs("div", Object.assign({ className: cn.tbl_b }, { children: [Object.keys(props.columns).map((key) => (_jsx("input", { className: cn.tbl_b__col, type: props.columns[key].input.type, name: props.columns[key].input.name, required: props.columns[key].input.required, defaultValue: opt[key], onBlur: onOptionChange(id) }, opt[key]))), _jsx("div", Object.assign({ className: cn.tbl_b__col, onClick: deleterow(id) }, { children: "\uD83D\uDDD1\uFE0F" }), 'trash'), _jsx("div", Object.assign({ className: cn.tbl_b__col, onClick: addnew(id) }, { children: "\u2795" }), 'addnew')] }), id));
    const headerColumns = (col) => (_jsx("div", Object.assign({ className: cn.tbl_h__col }, { children: props.columns[col].title }), col));
    return (_jsxs(_Fragment, { children: [_jsx("p", Object.assign({ className: cn.title }, { children: props.title })), _jsxs("div", Object.assign({ className: cn.tbl }, { children: [_jsxs("div", Object.assign({ className: cn.tbl_h }, { children: [Object.keys(props.columns).map(headerColumns), _jsx("div", Object.assign({ className: cn.tbl_h__col }, { children: "Delete" }), 'trash'), _jsx("div", Object.assign({ className: cn.tbl_h__col }, { children: "Add New" }), 'addnew')] })), options.map(renderOptions)] }))] }));
}
//# sourceMappingURL=Table.js.map