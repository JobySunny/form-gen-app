import { jsx as _jsx } from "react/jsx-runtime";
import React from 'react';
import { INPUT } from '../../../../Utils/constants';
import { useAppDispatch } from '../../StoreProvider';
import { Action } from '../../Store';
import { getThrottle } from '../../../../Utils/commonUtils';
import cn from './Input.module.scss';
export function Input(props) {
    const dispatch = useAppDispatch();
    const throttle = getThrottle('inputChange');
    const [value, setValue] = React.useState(props.value);
    React.useEffect(() => {
        if (props.value !== value) {
            setValue(props.value);
        }
    }, [props.value]);
    const onChange = (e) => {
        var _a, _b, _c;
        if (INPUT.DATE === props.type) {
            setValue((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.value);
        }
        if (INPUT.NUMBER === props.type) {
            setValue((_b = e === null || e === void 0 ? void 0 : e.target) === null || _b === void 0 ? void 0 : _b.valueAsNumber);
        }
        if (INPUT.TEXT === props.type) {
            setValue((_c = e === null || e === void 0 ? void 0 : e.target) === null || _c === void 0 ? void 0 : _c.value);
        }
    };
    React.useEffect(() => {
        if (props.value !== value) {
            throttle(() => {
                dispatch(Action.updateOptionItem({ name: props.name, value }));
            });
        }
    }, [value]);
    return (_jsx("input", { id: props.id, className: cn.inp, type: props.type, name: props.name, disabled: props.disabled, max: props.max, min: props.min, minLength: props.minLength, maxLength: props.maxLength, value: value, required: props.required, onChange: onChange }));
}
//# sourceMappingURL=Input.js.map