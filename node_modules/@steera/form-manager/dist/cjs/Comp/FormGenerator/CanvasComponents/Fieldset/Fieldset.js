"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fieldset = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const Fieldset_1 = require("../../../../Components/Fieldset");
const StoreProvider_1 = require("../../StoreProvider");
const Store_1 = require("../../Store");
const Fieldset_module_scss_1 = __importDefault(require("./Fieldset.module.scss"));
function Fieldset(props) {
    const dispatch = (0, StoreProvider_1.useAppDispatch)();
    const isPreview = (0, StoreProvider_1.useAppSelector)(Store_1.Selector.getIsPreview);
    const selectedPath = (0, StoreProvider_1.useAppSelector)(Store_1.Selector.getSelectedNodePath);
    const mainClass = `${props.mainClass} ${isPreview ? '' : selectedPath === props.path ? Fieldset_module_scss_1.default.selected : Fieldset_module_scss_1.default.nopreview}`;
    const legendClass = `${Fieldset_module_scss_1.default.label} ${props.legendClass}`;
    const onClick = () => {
        dispatch(Store_1.Action.selectComponent(props.path));
    };
    return ((0, jsx_runtime_1.jsx)(Fieldset_1.Fieldset, Object.assign({ legendStyle: props.legendStyle, legendClass: legendClass, mainClass: mainClass, style: props.style, title: props.title, onClick: onClick }, { children: props.children })));
}
exports.Fieldset = Fieldset;
//# sourceMappingURL=Fieldset.js.map