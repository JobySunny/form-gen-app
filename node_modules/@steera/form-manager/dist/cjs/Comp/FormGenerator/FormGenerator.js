"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FormGenerator = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const StoreProvider_1 = require("./StoreProvider");
const Store_1 = require("./Store");
const Header_1 = require("./Header");
const FormCanvas_1 = require("./FormCanvas");
const ChooseComponent_1 = require("./ChooseComponent");
const ConfigureComponent_1 = require("./ConfigureComponent");
const FormGenerator_module_scss_1 = __importDefault(require("./FormGenerator.module.scss"));
function Component(props) {
    const selectedNodePath = (0, StoreProvider_1.useAppSelector)(Store_1.Selector.getSelectedNodePath);
    const renderSideBarContent = () => {
        if (selectedNodePath) {
            return (0, jsx_runtime_1.jsx)(ConfigureComponent_1.ConfigureComponent, { selectedNodePath: selectedNodePath });
        }
        else {
            return (0, jsx_runtime_1.jsx)(ChooseComponent_1.ChooseComponent, {});
        }
    };
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({ className: FormGenerator_module_scss_1.default.container }, { children: [(0, jsx_runtime_1.jsx)(Header_1.Header, { onExport: props.onExport }), (0, jsx_runtime_1.jsxs)("div", Object.assign({ className: FormGenerator_module_scss_1.default.content }, { children: [(0, jsx_runtime_1.jsx)("section", Object.assign({ className: FormGenerator_module_scss_1.default.content_left }, { children: renderSideBarContent() })), (0, jsx_runtime_1.jsx)("section", Object.assign({ className: FormGenerator_module_scss_1.default.content_right }, { children: (0, jsx_runtime_1.jsx)(FormCanvas_1.FormCanvas, {}) }))] }))] })));
}
/*
 * FormGenerator:
 *  - FullScreen component to generator new form templates or edit exiting form templates passed to it as props
 */
function FormGenerator(props) {
    const [state, dispatch] = react_1.default.useReducer(Store_1.Reducer, Store_1.initialState);
    react_1.default.useEffect(() => {
        if (props.template)
            dispatch(Store_1.Action.propsChange({ template: props.template, templateName: props.name }));
    }, [props.template, props.name]);
    return ((0, jsx_runtime_1.jsx)(StoreProvider_1.Provider, Object.assign({ value: { state, dispatch } }, { children: (0, jsx_runtime_1.jsx)(Component, { onExport: props.onExport }) })));
}
exports.FormGenerator = FormGenerator;
//# sourceMappingURL=FormGenerator.js.map