"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.onChangeTemplateName = exports.onDeleteNode = exports.onCloseConfigSection = exports.onUpdateOptionItem = exports.onSelectComponent = exports.onAddToCanvas = exports.onTogglePreview = exports.onPropsChange = void 0;
const Helpers_1 = require("../Helpers");
const Store_utils_1 = require("../Store.utils");
const constants_1 = require("../../../../Utils/constants");
function onPropsChange(state, payload) {
    state.template = payload.template;
    state.templateName = payload.templateName;
    return state;
}
exports.onPropsChange = onPropsChange;
function onTogglePreview(state) {
    state.isPreview = !state.isPreview;
}
exports.onTogglePreview = onTogglePreview;
function onAddToCanvas(state, payload) {
    const parent = (0, Helpers_1.getParentByPath)(state.template, payload.placePath);
    if (parent) {
        (0, Helpers_1.addNewNodeInParent)(parent, payload.pathId);
    }
}
exports.onAddToCanvas = onAddToCanvas;
function onSelectComponent(state, payload) {
    state.selectedNodePath = payload;
}
exports.onSelectComponent = onSelectComponent;
function onUpdateOptionItem(state, payload) {
    const selectedNode = (0, Store_utils_1.getSelectedElement)(state);
    if ((selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === constants_1.INPUT.TEXT ||
        (selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === constants_1.INPUT.NUMBER ||
        (selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === constants_1.INPUT.DATE) {
        selectedNode.options[payload.name].input.value = payload.value;
    }
    if ((selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === constants_1.INPUT.SELECT) {
        selectedNode.options[payload.name].input.value = payload.value;
    }
    if ((selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === constants_1.INPUT.TABLE) {
        selectedNode.options[payload.name].input.optionItems = payload.options;
    }
    if ((selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === constants_1.INPUT.CHECKBOX) {
        selectedNode.options[payload.name].input.checked = payload.checked;
    }
}
exports.onUpdateOptionItem = onUpdateOptionItem;
function onCloseConfigSection(state) {
    state.selectedNodePath = '';
}
exports.onCloseConfigSection = onCloseConfigSection;
function onDeleteNode(state) {
    const parent = (0, Helpers_1.getParentByPath)(state.template, state.selectedNodePath);
    if (parent) {
        (0, Helpers_1.removeFromParentNode)(parent, state.selectedNodePath);
    }
    state.selectedNodePath = '';
}
exports.onDeleteNode = onDeleteNode;
function onChangeTemplateName(state, payload) {
    state.templateName = payload;
    return state;
}
exports.onChangeTemplateName = onChangeTemplateName;
//# sourceMappingURL=index.js.map