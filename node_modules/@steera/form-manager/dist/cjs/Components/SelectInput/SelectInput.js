"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectInput = void 0;
const jsx_runtime_1 = require("react/jsx-runtime");
const Select_1 = require("../Select");
/**
 *  SelectInput
 *   - Abstracted Select Component. That works on to of Select Component
 */
function SelectInput(props) {
    const onSearch = (input) => __awaiter(this, void 0, void 0, function* () {
        return new Promise((r) => {
            const searchInput = input.toLowerCase();
            if (searchInput.trim()) {
                const options = props.options.filter((o) => {
                    const label = o.label.toLowerCase();
                    return label.search(searchInput) >= 0;
                });
                r(options);
            }
            else {
                r(props.options);
            }
        });
    });
    return ((0, jsx_runtime_1.jsx)(Select_1.Select, { id: props.id, name: props.name, className: props.className, testId: props.testId, disabled: props.disabled, onSearch: onSearch, onSelect: props.onChange, value: props.value, placeholder: props.placeholder, required: props.required }));
}
exports.SelectInput = SelectInput;
//# sourceMappingURL=SelectInput.js.map