import React from 'react';
import {FormCanvasProps as Props} from './FormCanvas.interface';

import {ComponentPath, TemplateNodeType} from '../../Comp.interface';

import {
  Box,
  EmailBox,
  PasswordBox,
  TextBox,
  NumberBox,
  DateBox,
  RadioBox,
  CheckBox,
  SelectBox,
  Fieldset,
  Title,
} from '../RenderComponents';

export function FormCanvas(props: Props): React.ReactElement<any, any> {
  const renderBox = (c: TemplateNodeType) => (
    <Box key={c.path} options={c.options}>
      {c.children.map(renderTemplateComponent)}
    </Box>
  );

  const renderEmailBox = (c: TemplateNodeType) => (
    <EmailBox
      key={c.path}
      options={c.options}
      templateValues={props.templateValues}
    />
  );

  const renderTextBox = (c: TemplateNodeType) => (
    <TextBox
      key={c.path}
      options={c.options}
      templateValues={props.templateValues}
    />
  );

  const renderPasswordBox = (c: TemplateNodeType) => (
    <PasswordBox
      key={c.path}
      options={c.options}
      templateValues={props.templateValues}
    />
  );

  const renderNumberBox = (c: TemplateNodeType) => (
    <NumberBox
      key={c.path}
      options={c.options}
      templateValues={props.templateValues}
    />
  );

  const renderDateBox = (c: TemplateNodeType) => (
    <DateBox
      key={c.path}
      options={c.options}
      templateValues={props.templateValues}
    />
  );

  const renderRadioBox = (c: TemplateNodeType) => (
    <RadioBox
      key={c.path}
      options={c.options}
      templateValues={props.templateValues}
    />
  );

  const renderCheckBox = (c: TemplateNodeType) => (
    <CheckBox
      key={c.path}
      options={c.options}
      templateValues={props.templateValues}
    />
  );

  const renderSelectBox = (c: TemplateNodeType) => (
    <SelectBox
      key={c.path}
      options={c.options}
      templateValues={props.templateValues}
    />
  );

  const renderFieldset = (c: TemplateNodeType) => (
    <Fieldset key={c.path} options={c.options}>
      {c.children.map(renderTemplateComponent)}
    </Fieldset>
  );

  const renderTitle = (c: TemplateNodeType) => (
    <Title key={c.path} options={c.options} />
  );

  const renderTemplateComponent = (c: TemplateNodeType) => {
    switch (c.pathId) {
      case ComponentPath.box:
        return renderBox(c);
      case ComponentPath.emailbox:
        return renderEmailBox(c);
      case ComponentPath.textbox:
        return renderTextBox(c);
      case ComponentPath.passwordbox:
        return renderPasswordBox(c);
      case ComponentPath.numberbox:
        return renderNumberBox(c);
      case ComponentPath.datebox:
        return renderDateBox(c);
      case ComponentPath.radiobox:
        return renderRadioBox(c);
      case ComponentPath.checkbox:
        return renderCheckBox(c);
      case ComponentPath.selectbox:
        return renderSelectBox(c);
      case ComponentPath.fieldset:
        return renderFieldset(c);
      case ComponentPath.title:
        return renderTitle(c);
      default:
        return null;
    }
  };

  return props.template.map(renderTemplateComponent) as any;
}
