import React from 'react';

export interface FormContextInterface {
  submitted: boolean;
}

export const FormContext = React.createContext<FormContextInterface>({
  submitted: false,
});

function isInputValid(element: HTMLInputElement) {
  const {
    badInput,
    patternMismatch,
    rangeOverflow,
    rangeUnderflow,
    stepMismatch,
    tooLong,
    tooShort,
    typeMismatch,
    valueMissing,
  } = element.validity;
  return ![
    badInput,
    patternMismatch,
    rangeOverflow,
    rangeUnderflow,
    stepMismatch,
    tooLong,
    tooShort,
    typeMismatch,
    valueMissing,
  ].some((flag: boolean) => flag);
}

export function setCusotmElementValidity(
  elementId: string,
  invalidInputMessage: string
) {
  const element = document.getElementById(elementId);
  if (element) {
    const valid = isInputValid(element as HTMLInputElement);
    if (valid) {
      (element as HTMLInputElement).setCustomValidity('');
    } else {
      (element as HTMLInputElement).setCustomValidity(invalidInputMessage);
    }
  }
}
