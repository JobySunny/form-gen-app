import React from 'react';
import {FormCanvasProps as Props} from './FormCanvas.interface';

import {Selector} from '../Store';
import {useAppSelector} from '../StoreProvider';
import {ComponentPath, TemplateNodeType} from '../../Comp.interface';

import {
  AddNew,
  Box,
  EmailBox,
  PasswordBox,
  TextBox,
  NumberBox,
  DateBox,
  RadioBox,
  CheckBox,
  SelectBox,
  Fieldset,
  Title,
} from '../RenderComponents';

import cn from './FormCanvas.module.scss';

export function FormCanvas(props: Props) {
  const template = useAppSelector(Selector.getTemplate);
  const isPreview = useAppSelector(Selector.getIsPreview);

  const renderAddNew = (c: TemplateNodeType) => {
    return isPreview ? null : (
      <AddNew key={c.path} title={c.title} path={c.path} pathId={c.pathId} />
    );
  };

  const renderBox = (c: TemplateNodeType) => (
    <Box
      key={c.path}
      path={c.path}
      title={c.title}
      pathId={c.pathId}
      options={c.options}>
      {c.children.map(renderTemplateComponent)}
    </Box>
  );

  const renderEmailBox = (c: TemplateNodeType) => (
    <EmailBox
      key={c.path}
      path={c.path}
      title={c.title}
      pathId={c.pathId}
      options={c.options}
    />
  );

  const renderTextBox = (c: TemplateNodeType) => (
    <TextBox
      key={c.path}
      path={c.path}
      title={c.title}
      pathId={c.pathId}
      options={c.options}
    />
  );

  const renderPasswordBox = (c: TemplateNodeType) => (
    <PasswordBox
      key={c.path}
      path={c.path}
      title={c.title}
      pathId={c.pathId}
      options={c.options}
    />
  );

  const renderNumberBox = (c: TemplateNodeType) => (
    <NumberBox
      key={c.path}
      path={c.path}
      title={c.title}
      pathId={c.pathId}
      options={c.options}
    />
  );

  const renderDateBox = (c: TemplateNodeType) => (
    <DateBox
      key={c.path}
      path={c.path}
      title={c.title}
      pathId={c.pathId}
      options={c.options}
    />
  );

  const renderRadioBox = (c: TemplateNodeType) => (
    <RadioBox
      key={c.path}
      path={c.path}
      title={c.title}
      pathId={c.pathId}
      options={c.options}
    />
  );

  const renderCheckBox = (c: TemplateNodeType) => (
    <CheckBox
      key={c.path}
      path={c.path}
      title={c.title}
      pathId={c.pathId}
      options={c.options}
    />
  );

  const renderSelectBox = (c: TemplateNodeType) => (
    <SelectBox
      key={c.path}
      path={c.path}
      title={c.title}
      pathId={c.pathId}
      options={c.options}
    />
  );

  const renderFieldset = (c: TemplateNodeType) => (
    <Fieldset
      key={c.path}
      path={c.path}
      title={c.title}
      pathId={c.pathId}
      options={c.options}>
      {c.children.map(renderTemplateComponent)}
    </Fieldset>
  );

  const renderTitle = (c: TemplateNodeType) => (
    <Title
      key={c.path}
      path={c.path}
      title={c.title}
      pathId={c.pathId}
      options={c.options}
    />
  );

  const renderTemplateComponent = (c: TemplateNodeType) => {
    switch (c.pathId) {
      case ComponentPath.box:
        return renderBox(c);
      case ComponentPath.addnew:
        return renderAddNew(c);
      case ComponentPath.emailbox:
        return renderEmailBox(c);
      case ComponentPath.textbox:
        return renderTextBox(c);
      case ComponentPath.passwordbox:
        return renderPasswordBox(c);
      case ComponentPath.numberbox:
        return renderNumberBox(c);
      case ComponentPath.datebox:
        return renderDateBox(c);
      case ComponentPath.radiobox:
        return renderRadioBox(c);
      case ComponentPath.checkbox:
        return renderCheckBox(c);
      case ComponentPath.selectbox:
        return renderSelectBox(c);
      case ComponentPath.fieldset:
        return renderFieldset(c);
        case ComponentPath.title:
        return renderTitle(c);
      default:
        return null;
    }
  };

  return (
    <div className={cn.card}>
      <div className={cn.canvas}>{template.map(renderTemplateComponent)}</div>
    </div>
  );
}
