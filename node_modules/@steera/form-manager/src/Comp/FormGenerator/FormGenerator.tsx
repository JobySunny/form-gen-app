import React from 'react';
import {
  FormGeneratorProps as Props,
  FormGeneratorComponentProps as ComponentProps,
} from './FormGenerator.interface';
import {Provider, useAppSelector} from './StoreProvider';
import {Reducer, initialState, Action, Selector} from './Store';

import {Header} from './Header';
import {FormCanvas} from './FormCanvas';
import {ChooseComponent} from './ChooseComponent';
import {ConfigureComponent} from './ConfigureComponent';

import cn from './FormGenerator.module.scss';

function Component(props: ComponentProps) {
  const selectedNodePath = useAppSelector(Selector.getSelectedNodePath);

  const renderSideBarContent = () => {
    if (selectedNodePath) {
      return <ConfigureComponent selectedNodePath={selectedNodePath} />;
    } else {
      return <ChooseComponent />;
    }
  };

  return (
    <div className={cn.container}>
      <Header onExport={props.onExport} />
      <div className={cn.content}>
        <section className={cn.content_left}>{renderSideBarContent()}</section>
        <section className={cn.content_right}>
          <FormCanvas />
        </section>
      </div>
    </div>
  );
}

/*
 * FormGenerator:
 *  - FullScreen component to generator new form templates or edit exiting form templates passed to it as props
 */
export function FormGenerator(props: Props) {
  const [state, dispatch] = React.useReducer(Reducer, initialState);

  React.useEffect(() => {
    if (props.template)
      dispatch(
        Action.propsChange({template: props.template, templateName: props.name})
      );
  }, [props.template, props.name]);

  return (
    <Provider value={{state, dispatch}}>
      <Component onExport={props.onExport} />
    </Provider>
  );
}
