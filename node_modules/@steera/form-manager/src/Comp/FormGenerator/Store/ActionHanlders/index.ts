import {Action, TemplateState as State} from '../Store.interface';

import {
  getParentByPath,
  addNewNodeInParent,
  removeFromParentNode,
} from '../Helpers';
import {TemplateNodeType} from '../../../Comp.interface';
import {getSelectedElement} from '../Store.utils';
import {INPUT} from '../../../../Utils/constants';

export function onPropsChange(state: State, payload: Action['payload']): State {
  state.template = payload.template;
  state.templateName = payload.templateName;
  return state;
}

export function onTogglePreview(state: State) {
  state.isPreview = !state.isPreview;
}

type oATCPayload = {
  pathId: TemplateNodeType['pathId'];
  placePath: TemplateNodeType['path'];
};
export function onAddToCanvas(state: State, payload: oATCPayload) {
  const parent = getParentByPath(state.template, payload.placePath);
  if (parent) {
    addNewNodeInParent(parent, payload.pathId);
  }
}

export function onSelectComponent(state: State, payload: Action['payload']) {
  state.selectedNodePath = payload;
}

export function onUpdateOptionItem(state: State, payload: Action['payload']) {
  const selectedNode = getSelectedElement(state);
  if (
    selectedNode?.options[payload.name].input.type === INPUT.TEXT ||
    selectedNode?.options[payload.name].input.type === INPUT.NUMBER ||
    selectedNode?.options[payload.name].input.type === INPUT.DATE
  ) {
    selectedNode.options[payload.name].input.value = payload.value;
  }
  if (selectedNode?.options[payload.name].input.type === INPUT.SELECT) {
    selectedNode.options[payload.name].input.value = payload.value;
  }
  if (selectedNode?.options[payload.name].input.type === INPUT.TABLE) {
    selectedNode.options[payload.name].input.optionItems = payload.options;
  }
  if (selectedNode?.options[payload.name].input.type === INPUT.CHECKBOX) {
    selectedNode.options[payload.name].input.checked = payload.checked;
  }
}

export function onCloseConfigSection(state: State) {
  state.selectedNodePath = '';
}

export function onDeleteNode(state: State) {
  const parent = getParentByPath(state.template, state.selectedNodePath);
  if (parent) {
    removeFromParentNode(parent, state.selectedNodePath);
  }
  state.selectedNodePath = '';
}

export function onChangeTemplateName(
  state: State,
  payload: Action['payload']
): State {
  state.templateName = payload;
  return state;
}
