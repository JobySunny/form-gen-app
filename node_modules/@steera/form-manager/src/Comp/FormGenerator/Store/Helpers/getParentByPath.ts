import {Index, Path} from '../../../../Utils/pathUtils';
import {TemplateNodeType as T} from '../../../Comp.interface';
import {TemplateState as State} from '../Store.interface';

type TS = State['template'];

export function getParentByPath(template: TS, path: string): T {
  const indices: number[] = getParentPathIndices(path);
  let parentNode = indices.reduce((templateList: T | TS, nodeIndex) => {
    if (Array.isArray(templateList)) {
      return templateList[nodeIndex];
    } else {
      return templateList.children[nodeIndex];
    }
  }, template);
  return parentNode as T;
}

function getParentPathIndices(path: string) {
  const parsedPaths = Path.parseFullPath(path);
  return parsedPaths
    .slice(0, parsedPaths.length - 1)
    .map((n: [Index, string]) =>
      typeof n[0] === 'string' ? parseInt(n[0]) : n[0]
    );
}
