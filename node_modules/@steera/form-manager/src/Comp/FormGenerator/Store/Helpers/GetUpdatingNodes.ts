import {TemplateState} from '../Store.interface';
import {TemplateNodeType as NodeType} from '../../../Comp.interface';
import {Path, PathType} from '../../../../Utils/pathUtils';

/**
 * Get the Parent of state.selectedElementPath from state.template
 * @param state Current instance of FormGenerator Applicaiton state;
 * @returns Parent of the current Component in state.selectedElementPath
 */
export function getUpdatingParentNode(state: TemplateState): NodeType {
  // const {parent} = getParentAndTargetNodes(
  //   {children: state.template} as ParentElement,
  //   getPathIndices(state.selectedElementPath)
  // );
  // return parent;
  return {} as NodeType;
}

/**
 * Get the TargetComponent with path state.selectedElementPath from state.template
 * @param state Current instance of FormGenerator Applicaiton state;
 * @returns Current Component in state.selectedElementPath
 */
export function getUpdatingTargetNode(state: TemplateState): NodeType {
  // const {component} = getParentAndTargetNodes(
  //   {children: state.template} as ParentElement,
  //   getPathIndices(state.selectedElementPath)
  // );
  // return component;
  return {} as NodeType;
}

/**
 * Get all indices in a path string;
 * @param path path of a template component
 * @returns indices[]: these could be applied to template[] to get target component
 */
export function getPathIndices(path: PathType): number[] {
  return Path.parseFullPath(path).map(([index]) =>
    typeof index === 'string' ? parseInt(index) : index
  );
}

/**
 * Get the Parent & Target Node from state.template
 * @param template state.template that has all component nodes
 * @param indices indices[] to navigate to particular component
 * @returns ParentAndTargetNode
 */
export function getParentAndTargetNodes(
  template: NodeType,
  indices: number[]
): {parent: NodeType; component: NodeType} {
  return indices.reduce(
    (resp: any, current: number) => {
      if (resp.component && resp.component?.children) {
        let parent = resp.component;
        let component = resp.component.children[current];
        return {component, parent};
      } else {
        let component = resp.parent.children[current];
        return {component, parent: resp.parent};
      }
    },
    {component: undefined, parent: template}
  );
}
