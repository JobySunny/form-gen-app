import {Path} from '../../../../Utils/pathUtils';
import {TemplateNodeType as TNT} from '../../../Comp.interface';

export function removeFromParentNode(node: TNT, path: string) {
  node.children = node.children
    .filter((n) => !(n.path === path))
    .map((child: TNT, i: number) => {
      child.path = Path.addNodeToPath(
        node.path,
        Path.makePathNode(child.pathId, i)
      );
      if (child.children.length) {
        child.children = child.children.map(recursivelyChangePath(child.path));
      }
      return child;
    });
  return node;
}

function recursivelyChangePath(parentPath: string) {
  return (node: TNT, index: number) => {
    node.path = Path.addNodeToPath(
      parentPath,
      Path.makePathNode(node.pathId, index)
    );
    if (node.children.length) {
      node.children = node.children.map(recursivelyChangePath(node.path));
    }
    return node;
  };
}
