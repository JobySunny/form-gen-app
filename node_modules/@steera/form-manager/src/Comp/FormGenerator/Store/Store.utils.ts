import {TemplateState as State} from './Store.interface';
import {TemplateNodeType as TNT} from '../../Comp.interface';
import {Path, Index} from '../../../Utils/pathUtils';

export function getSelectedElement(state: State) {
  return getElementByPath(state.template, state.selectedNodePath);
}

type TS = State['template'];

function getElementByPath(template: TS, path: string): TNT {
  const indices: number[] = getNodePathIndices(path);
  let selectedNode = indices.reduce((templateList: TNT | TS, nodeIndex) => {
    if (Array.isArray(templateList)) {
      return templateList[nodeIndex];
    } else {
      return templateList.children[nodeIndex];
    }
  }, template);
  return selectedNode as TNT;
}

function getNodePathIndices(path: string) {
  return Path.parseFullPath(path).map((n: [Index, string]) =>
    typeof n[0] === 'string' ? parseInt(n[0]) : n[0]
  );
}
