import React from 'react';
import {ConfigureComponentProps as Props} from './ConfigureComponents.interface';
import {useAppDispatch, useAppSelector} from '../StoreProvider';
import {Selector, Action} from '../Store';
import {Input} from './Input';
import {INPUT} from '../../../Utils/constants';
import {ComponentOptionItemType} from '../../Comp.interface';

import {Checkbox} from './Checkbox';
import {Select} from './Select';
import {Label} from '../../../Components/Label';
import {Option} from './Option';
import {Table} from './Table';
import {Path} from '../../../Utils/pathUtils';
import cn from './ConfigureComponent.module.scss';

export function ConfigureComponent(props: Props) {
  const component = useAppSelector(Selector.getSelectedNode);

  const selectedNodePath = useAppSelector(Selector.getSelectedNodePath);

  const dispatch = useAppDispatch();

  const renderTextInput = (o: ComponentOptionItemType, key: string) => (
    <Option key={key} className={cn.conInp_list__opt}>
      <Label
        key={`${key}_label`}
        text={o.title}
        for={key}
        className={cn.label}
        required={o.input.required}
      />
      <Input
        id={key}
        name={key}
        key={`${key}_input`}
        type={o.input.type}
        disabled={o.input.disabled}
        maxLength={o.input.maxLength}
        minLength={o.input.minLength}
        value={o.input.value}
        required={o.input.required}
      />
    </Option>
  );

  const renderNumberInput = (o: ComponentOptionItemType, key: string) => (
    <Option key={key} className={cn.conInp_list__opt}>
      <Label
        text={o.title}
        key={`${key}_label`}
        for={key}
        className={cn.label}
        required={o.input.required}
      />
      <Input
        id={key}
        name={key}
        key={`${key}_input`}
        type={o.input.type}
        max={o.input.max}
        min={o.input.min}
        value={o.input.value}
        required={o.input.required}
        disabled={o.input.disabled}
      />
    </Option>
  );

  const renderCheck = (o: ComponentOptionItemType, key: string) => (
    <Option key={key} className={cn.conInp_list__opt}>
      <Label
        text={o.title}
        key={`${key}_label`}
        for={key}
        className={cn.label}
        required={o.input.required}
      />
      <Checkbox
        id={key}
        name={key}
        key={`${key}_input`}
        type={o.input.type}
        value={o.input.value}
        required={o.input.required}
        disabled={o.input.disabled}
        checked={o.input.checked}
      />
    </Option>
  );

  const renderSelect = (o: ComponentOptionItemType, key: string) => (
    <Option key={key} className={cn.conInp_list__opt}>
      <Label
        text={o.title}
        for={key}
        key={`${key}_label`}
        className={cn.label}
        required={o.input.required}
      />
      <Select
        id={key}
        name={key}
        key={`${key}_input`}
        options={o.input.options}
        required={o.input.required}
        value={o.input.value}
        disabled={o.input.disabled}
      />
    </Option>
  );

  const renderTable = (o: ComponentOptionItemType, key: string) => (
    <Option key={key} className={cn.conInp_list__opt}>
      <Table
        key={`${key}_table`}
        title={o.title}
        columns={o.input.columns}
        optionItems={o.input.optionItems}
      />
    </Option>
  );

  const renderOption = (option: ComponentOptionItemType, key: string) => {
    switch (option.input.type) {
      case INPUT.TEXT:
        return renderTextInput(option, key);
      case INPUT.NUMBER:
      case INPUT.DATE:
        return renderNumberInput(option, key);
      case INPUT.CHECKBOX:
        return renderCheck(option, key);
      case INPUT.SELECT:
        return renderSelect(option, key);
      case INPUT.TABLE:
        return renderTable(option, key);
      default:
        return null;
    }
  };

  const optionKey = (key: string) => renderOption(component.options[key], key);

  const onClickClose = () => {
    dispatch(Action.closeConfigWindow());
  };

  const canDelete = React.useMemo(
    () => Path.parseToNodes(selectedNodePath).length > 1,
    [selectedNodePath]
  );

  const onClickDelete = () => {
    if (canDelete) {
      dispatch(Action.deleteNode());
    }
  };

  const trashClass = `${cn.trash} ${canDelete ? '' : cn.disabled}`;

  return (
    <div className={cn.conInp}>
      <div className={cn.conInp_head}>
        <p className={cn.title}>{component.title}</p>
        <div onClick={onClickDelete} className={trashClass}>
          üóëÔ∏è
        </div>
        <div onClick={onClickClose} className={cn.cross}>
          ‚ùå
        </div>
      </div>
      <ul className={cn.conInp_list}>
        {Object.keys(component.options).map(optionKey)}
      </ul>
    </div>
  );
}
