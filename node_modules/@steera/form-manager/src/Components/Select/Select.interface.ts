export interface Option {
  /**
   * Unique identifier for an option
   */
  id: number | string;
  /**
   * Value for option
   */
  value: any;
  /**
   * label for option
   */
  label: string;
}

export interface OnChangeArg {
  /**
   * name of input
   */
  name: string;
  /**
   * Option selected
   */
  value: Option;
}

interface SingleSelect {
  /**
   * id to set on input for accessibility
   */
  id: string;
  /**
   * name for AsyncSelect input
   */
  name: string;
  /**
   * className to set on Component
   */
  className?: string;
  /**
   * boolean to set button disabled
   */
  disabled?: boolean;
  /**
   * id for testing
   * this will be used as a prefix and attached to each unit part
   */
  testId?: string;
  /**
   * Handler for when user types on the select
   */
  onSearch: (arg0: string) => Promise<Option[]>;
  /**
   * Handler for when an option is selected
   */
  onSelect: (arg0: OnChangeArg) => void;
  /**
   * Selected Item
   */
  value?: Option;
  /**
   * placeholder
   */
  placeholder?: string;
  /**
   * Event fired when element lose focus
   */
  onBlur?: (e: HTMLInputElement) => void;
  /**
   * Event fired when element receive focus
   */
  onFocus?: (e: HTMLInputElement) => void;
  /**
   * boolean indicating value is required
   */
  required: boolean;
}

export type SelectProps = SingleSelect;
