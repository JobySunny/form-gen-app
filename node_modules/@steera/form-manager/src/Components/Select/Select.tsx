import * as React from 'react';
import {SelectProps as Props, Option} from './Select.interface';

import {Wrap} from './Wrap';
import {Icon} from './Icon';
import {Content} from './Content';
import {Options} from './Options';
import {SelectTag} from './SelectTag';
import {InputBlock} from './InputBlock';

import {DELAY} from './Select.constants';

import {getThrottle as getDelay} from './Select.utils';
import cn from './Select.module.scss';

type State = {
  focused: boolean;
  options: Option[];
  loading: boolean;
  showOptions: boolean;
};

/**
 * Select
 *  Custom Select component for Async operations
 */
export function Select(props: Props): JSX.Element {
  const [state, setState] = React.useState<State>({
    focused: false,
    options: [],
    loading: false,
    showOptions: false,
  });

  const delay = getDelay('onBlurDelay');

  const onSearch = async (searchText: string) => {
    setState((s) => ({...s, loading: true, showOptions: true}));
    try {
      const options = await props.onSearch(searchText);
      setState((s) => ({...s, loading: false, options}));
    } catch (error) {
      setState((s) => ({...s, loading: false, options: []}));
    }
  };

  const onFocus = (target: HTMLInputElement) => {
    setState((s) => ({...s, focused: true}));
    props?.onFocus && props.onFocus(target);
  };

  const onBlur = (target: HTMLInputElement) => {
    delay(() => {
      setState((s) => ({...s, focused: false, showOptions: false}));
      props?.onBlur && props.onBlur(target);
    }, DELAY);
  };

  const onSelect = (option: Option) => {
    props.onSelect({name: props.name, value: option});
    delay(() => {
      setState((s) => ({...s, showOptions: false}));
    }, DELAY);
  };

  const getClassName = (selector = '') => {
    return `${cn[`sel${selector}`]} ${props.className}${selector}`;
  };

  return (
    <Wrap
      testId={props.testId ?? ''}
      onFocus={onFocus}
      onBlur={onBlur}
      className={getClassName('')}
      disabled={props.disabled ?? false}>
      <Content className={getClassName('_main')}>
        <SelectTag
          name={props.name}
          id={props.id}
          testId={props.testId ?? ''}
          options={state.options}
          value={props.value?.value}
          disabled={props.disabled!}
          required={props.required!}
          className={getClassName('_main__tag')}
        />
        <InputBlock
          focused={state.focused}
          value={props.value?.label}
          onSearch={onSearch}
          testId={props.testId ?? ''}
          disabled={props.disabled!}
          placeholder={props.placeholder ?? ''}
          className={getClassName('_main__input')}
        />
        <Icon
          focus={state.focused}
          loading={state.loading}
          testId={props.testId ?? ''}
          className={getClassName('_main__iconBlock')}
          iconClassName={getClassName('_main__iconBlock_item')}
        />
      </Content>
      <Options
        show={state.showOptions}
        testId={props.testId ?? ''}
        className={getClassName('_options')}
        options={state.options}
        loading={state.loading}
        onSelect={onSelect}
        optionClass={getClassName('_options__item')}
      />
    </Wrap>
  );
}
