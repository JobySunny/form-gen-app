{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { Provider, useAppSelector } from './StoreProvider';\nimport { Reducer, initialState, Action, Selector } from './Store';\nimport { Header } from './Header';\nimport { FormCanvas } from './FormCanvas';\nimport { ChooseComponent } from './ChooseComponent';\nimport { ConfigureComponent } from './ConfigureComponent';\nimport cn from './FormGenerator.module.scss';\n\nfunction Component(props) {\n  const selectedNodePath = useAppSelector(Selector.getSelectedNodePath);\n\n  const renderSideBarContent = () => {\n    if (selectedNodePath) {\n      return _jsx(ConfigureComponent, {\n        selectedNodePath: selectedNodePath\n      });\n    } else {\n      return _jsx(ChooseComponent, {});\n    }\n  };\n\n  return _jsxs(\"div\", Object.assign({\n    className: cn.container\n  }, {\n    children: [_jsx(Header, {\n      onExport: props.onExport\n    }), _jsxs(\"div\", Object.assign({\n      className: cn.content\n    }, {\n      children: [_jsx(\"section\", Object.assign({\n        className: cn.content_left\n      }, {\n        children: renderSideBarContent()\n      })), _jsx(\"section\", Object.assign({\n        className: cn.content_right\n      }, {\n        children: _jsx(FormCanvas, {})\n      }))]\n    }))]\n  }));\n}\n/*\n * FormGenerator:\n *  - FullScreen component to generator new form templates or edit exiting form templates passed to it as props\n */\n\n\nexport function FormGenerator(props) {\n  const [state, dispatch] = React.useReducer(Reducer, initialState);\n  React.useEffect(() => {\n    if (props.template) dispatch(Action.propsChange({\n      template: props.template,\n      templateName: props.name\n    }));\n  }, [props.template, props.name]);\n  return _jsx(Provider, Object.assign({\n    value: {\n      state,\n      dispatch\n    }\n  }, {\n    children: _jsx(Component, {\n      onExport: props.onExport\n    })\n  }));\n}","map":{"version":3,"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAKA,SAAQC,QAAR,EAAkBC,cAAlB,QAAuC,iBAAvC;AACA,SAAQC,OAAR,EAAiBC,YAAjB,EAA+BC,MAA/B,EAAuCC,QAAvC,QAAsD,SAAtD;AAEA,SAAQC,MAAR,QAAqB,UAArB;AACA,SAAQC,UAAR,QAAyB,cAAzB;AACA,SAAQC,eAAR,QAA8B,mBAA9B;AACA,SAAQC,kBAAR,QAAiC,sBAAjC;AAEA,OAAOC,EAAP,MAAe,6BAAf;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAAwC;EACtC,MAAMC,gBAAgB,GAAGZ,cAAc,CAACI,QAAQ,CAACS,mBAAV,CAAvC;;EAEA,MAAMC,oBAAoB,GAAG,MAAK;IAChC,IAAIF,gBAAJ,EAAsB;MACpB,OAAOG,KAACP,kBAAD,EAAmB;QAACI,gBAAgB,EAAEA;MAAnB,CAAnB,CAAP;IACD,CAFD,MAEO;MACL,OAAOG,KAACR,eAAD,EAAgB,EAAhB,CAAP;IACD;EACF,CAND;;EAQA,OACES;IAAKC,SAAS,EAAER,EAAE,CAACS;EAAnB,GAA4B;IAAAC,WAC1BJ,KAACV,MAAD,EAAO;MAACe,QAAQ,EAAET,KAAK,CAACS;IAAjB,CAAP,CAD0B,EAE1BJ;MAAKC,SAAS,EAAER,EAAE,CAACY;IAAnB,GAA0B;MAAAF,WACxBJ;QAASE,SAAS,EAAER,EAAE,CAACa;MAAvB,GAAmC;QAAAH,UAAGL,oBAAoB;MAAvB,CAAnC,EADwB,EAExBC;QAASE,SAAS,EAAER,EAAE,CAACc;MAAvB,GAAoC;QAAAJ,UAClCJ,KAACT,UAAD,EAAW,EAAX;MADkC,CAApC,EAFwB;IAAA,CAA1B,EAF0B;EAAA,CAA5B,EADF;AAWD;AAED;;;;;;AAIA,OAAM,SAAUkB,aAAV,CAAwBb,KAAxB,EAAoC;EACxC,MAAM,CAACc,KAAD,EAAQC,QAAR,IAAoB5B,KAAK,CAAC6B,UAAN,CAAiB1B,OAAjB,EAA0BC,YAA1B,CAA1B;EAEAJ,KAAK,CAAC8B,SAAN,CAAgB,MAAK;IACnB,IAAIjB,KAAK,CAACkB,QAAV,EACEH,QAAQ,CACNvB,MAAM,CAAC2B,WAAP,CAAmB;MAACD,QAAQ,EAAElB,KAAK,CAACkB,QAAjB;MAA2BE,YAAY,EAAEpB,KAAK,CAACqB;IAA/C,CAAnB,CADM,CAAR;EAGH,CALD,EAKG,CAACrB,KAAK,CAACkB,QAAP,EAAiBlB,KAAK,CAACqB,IAAvB,CALH;EAOA,OACEjB,KAAChB,QAAD,EAASkC;IAACC,KAAK,EAAE;MAACT,KAAD;MAAQC;IAAR;EAAR,GAAyB;IAAAP,UAChCJ,KAACL,SAAD,EAAU;MAACU,QAAQ,EAAET,KAAK,CAACS;IAAjB,CAAV;EADgC,CAAzB,CAAT,CADF;AAKD","names":["React","Provider","useAppSelector","Reducer","initialState","Action","Selector","Header","FormCanvas","ChooseComponent","ConfigureComponent","cn","Component","props","selectedNodePath","getSelectedNodePath","renderSideBarContent","_jsx","_jsxs","className","container","children","onExport","content","content_left","content_right","FormGenerator","state","dispatch","useReducer","useEffect","template","propsChange","templateName","name","Object","value"],"sources":["/home/fact-11/Desktop/formApp/formapp/node_modules/@steera/form-manager/src/Comp/FormGenerator/FormGenerator.tsx"],"sourcesContent":["import React from 'react';\nimport {\n  FormGeneratorProps as Props,\n  FormGeneratorComponentProps as ComponentProps,\n} from './FormGenerator.interface';\nimport {Provider, useAppSelector} from './StoreProvider';\nimport {Reducer, initialState, Action, Selector} from './Store';\n\nimport {Header} from './Header';\nimport {FormCanvas} from './FormCanvas';\nimport {ChooseComponent} from './ChooseComponent';\nimport {ConfigureComponent} from './ConfigureComponent';\n\nimport cn from './FormGenerator.module.scss';\n\nfunction Component(props: ComponentProps) {\n  const selectedNodePath = useAppSelector(Selector.getSelectedNodePath);\n\n  const renderSideBarContent = () => {\n    if (selectedNodePath) {\n      return <ConfigureComponent selectedNodePath={selectedNodePath} />;\n    } else {\n      return <ChooseComponent />;\n    }\n  };\n\n  return (\n    <div className={cn.container}>\n      <Header onExport={props.onExport} />\n      <div className={cn.content}>\n        <section className={cn.content_left}>{renderSideBarContent()}</section>\n        <section className={cn.content_right}>\n          <FormCanvas />\n        </section>\n      </div>\n    </div>\n  );\n}\n\n/*\n * FormGenerator:\n *  - FullScreen component to generator new form templates or edit exiting form templates passed to it as props\n */\nexport function FormGenerator(props: Props) {\n  const [state, dispatch] = React.useReducer(Reducer, initialState);\n\n  React.useEffect(() => {\n    if (props.template)\n      dispatch(\n        Action.propsChange({template: props.template, templateName: props.name})\n      );\n  }, [props.template, props.name]);\n\n  return (\n    <Provider value={{state, dispatch}}>\n      <Component onExport={props.onExport} />\n    </Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}