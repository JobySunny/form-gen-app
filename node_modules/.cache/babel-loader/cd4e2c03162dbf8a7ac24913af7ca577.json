{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Select as S } from '../Select';\n/**\n *  SelectInput\n *   - Abstracted Select Component. That works on to of Select Component\n */\n\nexport function SelectInput(props) {\n  const onSearch = input => __awaiter(this, void 0, void 0, function* () {\n    return new Promise(r => {\n      const searchInput = input.toLowerCase();\n\n      if (searchInput.trim()) {\n        const options = props.options.filter(o => {\n          const label = o.label.toLowerCase();\n          return label.search(searchInput) >= 0;\n        });\n        r(options);\n      } else {\n        r(props.options);\n      }\n    });\n  });\n\n  return _jsx(S, {\n    id: props.id,\n    name: props.name,\n    className: props.className,\n    testId: props.testId,\n    disabled: props.disabled,\n    onSearch: onSearch,\n    onSelect: props.onChange,\n    value: props.value,\n    placeholder: props.placeholder,\n    required: props.required\n  });\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAAQA,MAAM,IAAIC,CAAlB,QAA0B,WAA1B;AAEA;;;;;AAIA,OAAM,SAAUC,WAAV,CAAsBC,KAAtB,EAAkC;EACtC,MAAMC,QAAQ,GAAUC,KAAP,IAA2CC;IAC1D,WAAIC,OAAJ,CAAaC,CAAD,IAAM;MAChB,MAAMC,WAAW,GAAGJ,KAAK,CAACK,WAAN,EAApB;;MACA,IAAID,WAAW,CAACE,IAAZ,EAAJ,EAAwB;QACtB,MAAMC,OAAO,GAAGT,KAAK,CAACS,OAAN,CAAcC,MAAd,CAAsBC,CAAD,IAAc;UACjD,MAAMC,KAAK,GAAGD,CAAC,CAACC,KAAF,CAAQL,WAAR,EAAd;UACA,OAAOK,KAAK,CAACC,MAAN,CAAaP,WAAb,KAA6B,CAApC;QACD,CAHe,CAAhB;QAIAD,CAAC,CAACI,OAAD,CAAD;MACD,CAND,MAMO;QACLJ,CAAC,CAACL,KAAK,CAACS,OAAP,CAAD;MACD;IACF,CAXD;GAD0D,CAA5D;;EAcA,OACEK,KAAChB,CAAD,EAAE;IACAiB,EAAE,EAAEf,KAAK,CAACe,EADV;IAEAC,IAAI,EAAEhB,KAAK,CAACgB,IAFZ;IAGAC,SAAS,EAAEjB,KAAK,CAACiB,SAHjB;IAIAC,MAAM,EAAElB,KAAK,CAACkB,MAJd;IAKAC,QAAQ,EAAEnB,KAAK,CAACmB,QALhB;IAMAlB,QAAQ,EAAEA,QANV;IAOAmB,QAAQ,EAAEpB,KAAK,CAACqB,QAPhB;IAQAC,KAAK,EAAEtB,KAAK,CAACsB,KARb;IASAC,WAAW,EAAEvB,KAAK,CAACuB,WATnB;IAUAC,QAAQ,EAAExB,KAAK,CAACwB;EAVhB,CAAF,CADF;AAcD","names":["Select","S","SelectInput","props","onSearch","input","__awaiter","Promise","r","searchInput","toLowerCase","trim","options","filter","o","label","search","_jsx","id","name","className","testId","disabled","onSelect","onChange","value","placeholder","required"],"sources":["/home/fact-11/Desktop/formApp/formapp/node_modules/@steera/form-manager/src/Components/SelectInput/SelectInput.tsx"],"sourcesContent":["import React from 'react';\nimport {SelectInputProps as Props, Option} from './SelectInput.interface';\n\nimport {Select as S} from '../Select';\n\n/**\n *  SelectInput\n *   - Abstracted Select Component. That works on to of Select Component\n */\nexport function SelectInput(props: Props): JSX.Element {\n  const onSearch = async (input: string): Promise<Option[]> =>\n    new Promise((r) => {\n      const searchInput = input.toLowerCase();\n      if (searchInput.trim()) {\n        const options = props.options.filter((o: Option) => {\n          const label = o.label.toLowerCase();\n          return label.search(searchInput) >= 0;\n        });\n        r(options);\n      } else {\n        r(props.options);\n      }\n    });\n\n  return (\n    <S\n      id={props.id}\n      name={props.name}\n      className={props.className}\n      testId={props.testId}\n      disabled={props.disabled}\n      onSearch={onSearch}\n      onSelect={props.onChange}\n      value={props.value}\n      placeholder={props.placeholder}\n      required={props.required}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}