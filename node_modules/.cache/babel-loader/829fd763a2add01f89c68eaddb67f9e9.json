{"ast":null,"code":"import { Path } from '../../../../Utils/pathUtils';\n/**\n * Get the Parent of state.selectedElementPath from state.template\n * @param state Current instance of FormGenerator Applicaiton state;\n * @returns Parent of the current Component in state.selectedElementPath\n */\n\nexport function getUpdatingParentNode(state) {\n  // const {parent} = getParentAndTargetNodes(\n  //   {children: state.template} as ParentElement,\n  //   getPathIndices(state.selectedElementPath)\n  // );\n  // return parent;\n  return {};\n}\n/**\n * Get the TargetComponent with path state.selectedElementPath from state.template\n * @param state Current instance of FormGenerator Applicaiton state;\n * @returns Current Component in state.selectedElementPath\n */\n\nexport function getUpdatingTargetNode(state) {\n  // const {component} = getParentAndTargetNodes(\n  //   {children: state.template} as ParentElement,\n  //   getPathIndices(state.selectedElementPath)\n  // );\n  // return component;\n  return {};\n}\n/**\n * Get all indices in a path string;\n * @param path path of a template component\n * @returns indices[]: these could be applied to template[] to get target component\n */\n\nexport function getPathIndices(path) {\n  return Path.parseFullPath(path).map(_ref => {\n    let [index] = _ref;\n    return typeof index === 'string' ? parseInt(index) : index;\n  });\n}\n/**\n * Get the Parent & Target Node from state.template\n * @param template state.template that has all component nodes\n * @param indices indices[] to navigate to particular component\n * @returns ParentAndTargetNode\n */\n\nexport function getParentAndTargetNodes(template, indices) {\n  return indices.reduce((resp, current) => {\n    var _a;\n\n    if (resp.component && ((_a = resp.component) === null || _a === void 0 ? void 0 : _a.children)) {\n      let parent = resp.component;\n      let component = resp.component.children[current];\n      return {\n        component,\n        parent\n      };\n    } else {\n      let component = resp.parent.children[current];\n      return {\n        component,\n        parent: resp.parent\n      };\n    }\n  }, {\n    component: undefined,\n    parent: template\n  });\n}","map":{"version":3,"mappings":"AAEA,SAAQA,IAAR,QAA6B,6BAA7B;AAEA;;;;;;AAKA,OAAM,SAAUC,qBAAV,CAAgCC,KAAhC,EAAoD;EACxD;EACA;EACA;EACA;EACA;EACA,OAAO,EAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAUC,qBAAV,CAAgCD,KAAhC,EAAoD;EACxD;EACA;EACA;EACA;EACA;EACA,OAAO,EAAP;AACD;AAED;;;;;;AAKA,OAAM,SAAUE,cAAV,CAAyBC,IAAzB,EAAuC;EAC3C,OAAOL,IAAI,CAACM,aAAL,CAAmBD,IAAnB,EAAyBE,GAAzB,CAA6B;IAAA,IAAC,CAACC,KAAD,CAAD;IAAA,OAClC,OAAOA,KAAP,KAAiB,QAAjB,GAA4BC,QAAQ,CAACD,KAAD,CAApC,GAA8CA,KADZ;EAAA,CAA7B,CAAP;AAGD;AAED;;;;;;;AAMA,OAAM,SAAUE,uBAAV,CACJC,QADI,EAEJC,OAFI,EAEa;EAEjB,OAAOA,OAAO,CAACC,MAAR,CACL,CAACC,IAAD,EAAYC,OAAZ,KAA+B;;;IAC7B,IAAID,IAAI,CAACE,SAAL,KAAkB,UAAI,CAACA,SAAL,MAAc,IAAd,IAAcC,aAAd,GAAc,MAAd,GAAcA,GAAEC,QAAlC,CAAJ,EAAgD;MAC9C,IAAIC,MAAM,GAAGL,IAAI,CAACE,SAAlB;MACA,IAAIA,SAAS,GAAGF,IAAI,CAACE,SAAL,CAAeE,QAAf,CAAwBH,OAAxB,CAAhB;MACA,OAAO;QAACC,SAAD;QAAYG;MAAZ,CAAP;IACD,CAJD,MAIO;MACL,IAAIH,SAAS,GAAGF,IAAI,CAACK,MAAL,CAAYD,QAAZ,CAAqBH,OAArB,CAAhB;MACA,OAAO;QAACC,SAAD;QAAYG,MAAM,EAAEL,IAAI,CAACK;MAAzB,CAAP;IACD;EACF,CAVI,EAWL;IAACH,SAAS,EAAEI,SAAZ;IAAuBD,MAAM,EAAER;EAA/B,CAXK,CAAP;AAaD","names":["Path","getUpdatingParentNode","state","getUpdatingTargetNode","getPathIndices","path","parseFullPath","map","index","parseInt","getParentAndTargetNodes","template","indices","reduce","resp","current","component","_a","children","parent","undefined"],"sources":["/home/fact-11/Desktop/formApp/formapp/node_modules/@steera/form-manager/src/Comp/FormGenerator/Store/Helpers/GetUpdatingNodes.ts"],"sourcesContent":["import {TemplateState} from '../Store.interface';\nimport {TemplateNodeType as NodeType} from '../../../Comp.interface';\nimport {Path, PathType} from '../../../../Utils/pathUtils';\n\n/**\n * Get the Parent of state.selectedElementPath from state.template\n * @param state Current instance of FormGenerator Applicaiton state;\n * @returns Parent of the current Component in state.selectedElementPath\n */\nexport function getUpdatingParentNode(state: TemplateState): NodeType {\n  // const {parent} = getParentAndTargetNodes(\n  //   {children: state.template} as ParentElement,\n  //   getPathIndices(state.selectedElementPath)\n  // );\n  // return parent;\n  return {} as NodeType;\n}\n\n/**\n * Get the TargetComponent with path state.selectedElementPath from state.template\n * @param state Current instance of FormGenerator Applicaiton state;\n * @returns Current Component in state.selectedElementPath\n */\nexport function getUpdatingTargetNode(state: TemplateState): NodeType {\n  // const {component} = getParentAndTargetNodes(\n  //   {children: state.template} as ParentElement,\n  //   getPathIndices(state.selectedElementPath)\n  // );\n  // return component;\n  return {} as NodeType;\n}\n\n/**\n * Get all indices in a path string;\n * @param path path of a template component\n * @returns indices[]: these could be applied to template[] to get target component\n */\nexport function getPathIndices(path: PathType): number[] {\n  return Path.parseFullPath(path).map(([index]) =>\n    typeof index === 'string' ? parseInt(index) : index\n  );\n}\n\n/**\n * Get the Parent & Target Node from state.template\n * @param template state.template that has all component nodes\n * @param indices indices[] to navigate to particular component\n * @returns ParentAndTargetNode\n */\nexport function getParentAndTargetNodes(\n  template: NodeType,\n  indices: number[]\n): {parent: NodeType; component: NodeType} {\n  return indices.reduce(\n    (resp: any, current: number) => {\n      if (resp.component && resp.component?.children) {\n        let parent = resp.component;\n        let component = resp.component.children[current];\n        return {component, parent};\n      } else {\n        let component = resp.parent.children[current];\n        return {component, parent: resp.parent};\n      }\n    },\n    {component: undefined, parent: template}\n  );\n}\n"]},"metadata":{},"sourceType":"module"}