{"ast":null,"code":"import { Path } from '../../../Utils/pathUtils';\nexport function getSelectedElement(state) {\n  return getElementByPath(state.template, state.selectedNodePath);\n}\n\nfunction getElementByPath(template, path) {\n  const indices = getNodePathIndices(path);\n  let selectedNode = indices.reduce((templateList, nodeIndex) => {\n    if (Array.isArray(templateList)) {\n      return templateList[nodeIndex];\n    } else {\n      return templateList.children[nodeIndex];\n    }\n  }, template);\n  return selectedNode;\n}\n\nfunction getNodePathIndices(path) {\n  return Path.parseFullPath(path).map(n => typeof n[0] === 'string' ? parseInt(n[0]) : n[0]);\n}","map":{"version":3,"mappings":"AAEA,SAAQA,IAAR,QAA0B,0BAA1B;AAEA,OAAM,SAAUC,kBAAV,CAA6BC,KAA7B,EAAyC;EAC7C,OAAOC,gBAAgB,CAACD,KAAK,CAACE,QAAP,EAAiBF,KAAK,CAACG,gBAAvB,CAAvB;AACD;;AAID,SAASF,gBAAT,CAA0BC,QAA1B,EAAwCE,IAAxC,EAAoD;EAClD,MAAMC,OAAO,GAAaC,kBAAkB,CAACF,IAAD,CAA5C;EACA,IAAIG,YAAY,GAAGF,OAAO,CAACG,MAAR,CAAe,CAACC,YAAD,EAAyBC,SAAzB,KAAsC;IACtE,IAAIC,KAAK,CAACC,OAAN,CAAcH,YAAd,CAAJ,EAAiC;MAC/B,OAAOA,YAAY,CAACC,SAAD,CAAnB;IACD,CAFD,MAEO;MACL,OAAOD,YAAY,CAACI,QAAb,CAAsBH,SAAtB,CAAP;IACD;EACF,CANkB,EAMhBR,QANgB,CAAnB;EAOA,OAAOK,YAAP;AACD;;AAED,SAASD,kBAAT,CAA4BF,IAA5B,EAAwC;EACtC,OAAON,IAAI,CAACgB,aAAL,CAAmBV,IAAnB,EAAyBW,GAAzB,CAA8BC,CAAD,IAClC,OAAOA,CAAC,CAAC,CAAD,CAAR,KAAgB,QAAhB,GAA2BC,QAAQ,CAACD,CAAC,CAAC,CAAD,CAAF,CAAnC,GAA4CA,CAAC,CAAC,CAAD,CADxC,CAAP;AAGD","names":["Path","getSelectedElement","state","getElementByPath","template","selectedNodePath","path","indices","getNodePathIndices","selectedNode","reduce","templateList","nodeIndex","Array","isArray","children","parseFullPath","map","n","parseInt"],"sources":["/home/fact-11/Desktop/formApp/formapp/node_modules/@steera/form-manager/src/Comp/FormGenerator/Store/Store.utils.ts"],"sourcesContent":["import {TemplateState as State} from './Store.interface';\nimport {TemplateNodeType as TNT} from '../../Comp.interface';\nimport {Path, Index} from '../../../Utils/pathUtils';\n\nexport function getSelectedElement(state: State) {\n  return getElementByPath(state.template, state.selectedNodePath);\n}\n\ntype TS = State['template'];\n\nfunction getElementByPath(template: TS, path: string): TNT {\n  const indices: number[] = getNodePathIndices(path);\n  let selectedNode = indices.reduce((templateList: TNT | TS, nodeIndex) => {\n    if (Array.isArray(templateList)) {\n      return templateList[nodeIndex];\n    } else {\n      return templateList.children[nodeIndex];\n    }\n  }, template);\n  return selectedNode as TNT;\n}\n\nfunction getNodePathIndices(path: string) {\n  return Path.parseFullPath(path).map((n: [Index, string]) =>\n    typeof n[0] === 'string' ? parseInt(n[0]) : n[0]\n  );\n}\n"]},"metadata":{},"sourceType":"module"}