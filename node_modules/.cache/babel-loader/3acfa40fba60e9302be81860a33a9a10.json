{"ast":null,"code":"import { getParentByPath, addNewNodeInParent, removeFromParentNode } from '../Helpers';\nimport { getSelectedElement } from '../Store.utils';\nimport { INPUT } from '../../../../Utils/constants';\nexport function onPropsChange(state, payload) {\n  state.template = payload.template;\n  state.templateName = payload.templateName;\n  return state;\n}\nexport function onTogglePreview(state) {\n  state.isPreview = !state.isPreview;\n}\nexport function onAddToCanvas(state, payload) {\n  const parent = getParentByPath(state.template, payload.placePath);\n\n  if (parent) {\n    addNewNodeInParent(parent, payload.pathId);\n  }\n}\nexport function onSelectComponent(state, payload) {\n  state.selectedNodePath = payload;\n}\nexport function onUpdateOptionItem(state, payload) {\n  const selectedNode = getSelectedElement(state);\n\n  if ((selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === INPUT.TEXT || (selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === INPUT.NUMBER || (selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === INPUT.DATE) {\n    selectedNode.options[payload.name].input.value = payload.value;\n  }\n\n  if ((selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === INPUT.SELECT) {\n    selectedNode.options[payload.name].input.value = payload.value;\n  }\n\n  if ((selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === INPUT.TABLE) {\n    selectedNode.options[payload.name].input.optionItems = payload.options;\n  }\n\n  if ((selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.options[payload.name].input.type) === INPUT.CHECKBOX) {\n    selectedNode.options[payload.name].input.checked = payload.checked;\n  }\n}\nexport function onCloseConfigSection(state) {\n  state.selectedNodePath = '';\n}\nexport function onDeleteNode(state) {\n  const parent = getParentByPath(state.template, state.selectedNodePath);\n\n  if (parent) {\n    removeFromParentNode(parent, state.selectedNodePath);\n  }\n\n  state.selectedNodePath = '';\n}\nexport function onChangeTemplateName(state, payload) {\n  state.templateName = payload;\n  return state;\n}","map":{"version":3,"mappings":"AAEA,SACEA,eADF,EAEEC,kBAFF,EAGEC,oBAHF,QAIO,YAJP;AAMA,SAAQC,kBAAR,QAAiC,gBAAjC;AACA,SAAQC,KAAR,QAAoB,6BAApB;AAEA,OAAM,SAAUC,aAAV,CAAwBC,KAAxB,EAAsCC,OAAtC,EAAgE;EACpED,KAAK,CAACE,QAAN,GAAiBD,OAAO,CAACC,QAAzB;EACAF,KAAK,CAACG,YAAN,GAAqBF,OAAO,CAACE,YAA7B;EACA,OAAOH,KAAP;AACD;AAED,OAAM,SAAUI,eAAV,CAA0BJ,KAA1B,EAAsC;EAC1CA,KAAK,CAACK,SAAN,GAAkB,CAACL,KAAK,CAACK,SAAzB;AACD;AAMD,OAAM,SAAUC,aAAV,CAAwBN,KAAxB,EAAsCC,OAAtC,EAA0D;EAC9D,MAAMM,MAAM,GAAGb,eAAe,CAACM,KAAK,CAACE,QAAP,EAAiBD,OAAO,CAACO,SAAzB,CAA9B;;EACA,IAAID,MAAJ,EAAY;IACVZ,kBAAkB,CAACY,MAAD,EAASN,OAAO,CAACQ,MAAjB,CAAlB;EACD;AACF;AAED,OAAM,SAAUC,iBAAV,CAA4BV,KAA5B,EAA0CC,OAA1C,EAAoE;EACxED,KAAK,CAACW,gBAAN,GAAyBV,OAAzB;AACD;AAED,OAAM,SAAUW,kBAAV,CAA6BZ,KAA7B,EAA2CC,OAA3C,EAAqE;EACzE,MAAMY,YAAY,GAAGhB,kBAAkB,CAACG,KAAD,CAAvC;;EACA,IACE,aAAY,SAAZ,gBAAY,WAAZ,GAAY,MAAZ,eAAY,CAAEc,OAAd,CAAsBb,OAAO,CAACc,IAA9B,EAAoCC,KAApC,CAA0CC,IAA1C,MAAmDnB,KAAK,CAACoB,IAAzD,IACA,aAAY,SAAZ,gBAAY,WAAZ,GAAY,MAAZ,eAAY,CAAEJ,OAAd,CAAsBb,OAAO,CAACc,IAA9B,EAAoCC,KAApC,CAA0CC,IAA1C,MAAmDnB,KAAK,CAACqB,MADzD,IAEA,aAAY,SAAZ,gBAAY,WAAZ,GAAY,MAAZ,eAAY,CAAEL,OAAd,CAAsBb,OAAO,CAACc,IAA9B,EAAoCC,KAApC,CAA0CC,IAA1C,MAAmDnB,KAAK,CAACsB,IAH3D,EAIE;IACAP,YAAY,CAACC,OAAb,CAAqBb,OAAO,CAACc,IAA7B,EAAmCC,KAAnC,CAAyCK,KAAzC,GAAiDpB,OAAO,CAACoB,KAAzD;EACD;;EACD,IAAI,aAAY,SAAZ,gBAAY,WAAZ,GAAY,MAAZ,eAAY,CAAEP,OAAd,CAAsBb,OAAO,CAACc,IAA9B,EAAoCC,KAApC,CAA0CC,IAA1C,MAAmDnB,KAAK,CAACwB,MAA7D,EAAqE;IACnET,YAAY,CAACC,OAAb,CAAqBb,OAAO,CAACc,IAA7B,EAAmCC,KAAnC,CAAyCK,KAAzC,GAAiDpB,OAAO,CAACoB,KAAzD;EACD;;EACD,IAAI,aAAY,SAAZ,gBAAY,WAAZ,GAAY,MAAZ,eAAY,CAAEP,OAAd,CAAsBb,OAAO,CAACc,IAA9B,EAAoCC,KAApC,CAA0CC,IAA1C,MAAmDnB,KAAK,CAACyB,KAA7D,EAAoE;IAClEV,YAAY,CAACC,OAAb,CAAqBb,OAAO,CAACc,IAA7B,EAAmCC,KAAnC,CAAyCQ,WAAzC,GAAuDvB,OAAO,CAACa,OAA/D;EACD;;EACD,IAAI,aAAY,SAAZ,gBAAY,WAAZ,GAAY,MAAZ,eAAY,CAAEA,OAAd,CAAsBb,OAAO,CAACc,IAA9B,EAAoCC,KAApC,CAA0CC,IAA1C,MAAmDnB,KAAK,CAAC2B,QAA7D,EAAuE;IACrEZ,YAAY,CAACC,OAAb,CAAqBb,OAAO,CAACc,IAA7B,EAAmCC,KAAnC,CAAyCU,OAAzC,GAAmDzB,OAAO,CAACyB,OAA3D;EACD;AACF;AAED,OAAM,SAAUC,oBAAV,CAA+B3B,KAA/B,EAA2C;EAC/CA,KAAK,CAACW,gBAAN,GAAyB,EAAzB;AACD;AAED,OAAM,SAAUiB,YAAV,CAAuB5B,KAAvB,EAAmC;EACvC,MAAMO,MAAM,GAAGb,eAAe,CAACM,KAAK,CAACE,QAAP,EAAiBF,KAAK,CAACW,gBAAvB,CAA9B;;EACA,IAAIJ,MAAJ,EAAY;IACVX,oBAAoB,CAACW,MAAD,EAASP,KAAK,CAACW,gBAAf,CAApB;EACD;;EACDX,KAAK,CAACW,gBAAN,GAAyB,EAAzB;AACD;AAED,OAAM,SAAUkB,oBAAV,CACJ7B,KADI,EAEJC,OAFI,EAEsB;EAE1BD,KAAK,CAACG,YAAN,GAAqBF,OAArB;EACA,OAAOD,KAAP;AACD","names":["getParentByPath","addNewNodeInParent","removeFromParentNode","getSelectedElement","INPUT","onPropsChange","state","payload","template","templateName","onTogglePreview","isPreview","onAddToCanvas","parent","placePath","pathId","onSelectComponent","selectedNodePath","onUpdateOptionItem","selectedNode","options","name","input","type","TEXT","NUMBER","DATE","value","SELECT","TABLE","optionItems","CHECKBOX","checked","onCloseConfigSection","onDeleteNode","onChangeTemplateName"],"sources":["/home/fact-11/Desktop/formApp/formapp/node_modules/@steera/form-manager/src/Comp/FormGenerator/Store/ActionHanlders/index.ts"],"sourcesContent":["import {Action, TemplateState as State} from '../Store.interface';\n\nimport {\n  getParentByPath,\n  addNewNodeInParent,\n  removeFromParentNode,\n} from '../Helpers';\nimport {TemplateNodeType} from '../../../Comp.interface';\nimport {getSelectedElement} from '../Store.utils';\nimport {INPUT} from '../../../../Utils/constants';\n\nexport function onPropsChange(state: State, payload: Action['payload']): State {\n  state.template = payload.template;\n  state.templateName = payload.templateName;\n  return state;\n}\n\nexport function onTogglePreview(state: State) {\n  state.isPreview = !state.isPreview;\n}\n\ntype oATCPayload = {\n  pathId: TemplateNodeType['pathId'];\n  placePath: TemplateNodeType['path'];\n};\nexport function onAddToCanvas(state: State, payload: oATCPayload) {\n  const parent = getParentByPath(state.template, payload.placePath);\n  if (parent) {\n    addNewNodeInParent(parent, payload.pathId);\n  }\n}\n\nexport function onSelectComponent(state: State, payload: Action['payload']) {\n  state.selectedNodePath = payload;\n}\n\nexport function onUpdateOptionItem(state: State, payload: Action['payload']) {\n  const selectedNode = getSelectedElement(state);\n  if (\n    selectedNode?.options[payload.name].input.type === INPUT.TEXT ||\n    selectedNode?.options[payload.name].input.type === INPUT.NUMBER ||\n    selectedNode?.options[payload.name].input.type === INPUT.DATE\n  ) {\n    selectedNode.options[payload.name].input.value = payload.value;\n  }\n  if (selectedNode?.options[payload.name].input.type === INPUT.SELECT) {\n    selectedNode.options[payload.name].input.value = payload.value;\n  }\n  if (selectedNode?.options[payload.name].input.type === INPUT.TABLE) {\n    selectedNode.options[payload.name].input.optionItems = payload.options;\n  }\n  if (selectedNode?.options[payload.name].input.type === INPUT.CHECKBOX) {\n    selectedNode.options[payload.name].input.checked = payload.checked;\n  }\n}\n\nexport function onCloseConfigSection(state: State) {\n  state.selectedNodePath = '';\n}\n\nexport function onDeleteNode(state: State) {\n  const parent = getParentByPath(state.template, state.selectedNodePath);\n  if (parent) {\n    removeFromParentNode(parent, state.selectedNodePath);\n  }\n  state.selectedNodePath = '';\n}\n\nexport function onChangeTemplateName(\n  state: State,\n  payload: Action['payload']\n): State {\n  state.templateName = payload;\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}