{"ast":null,"code":"import { Path } from '../../../../Utils/pathUtils';\nexport function getParentByPath(template, path) {\n  const indices = getParentPathIndices(path);\n  let parentNode = indices.reduce((templateList, nodeIndex) => {\n    if (Array.isArray(templateList)) {\n      return templateList[nodeIndex];\n    } else {\n      return templateList.children[nodeIndex];\n    }\n  }, template);\n  return parentNode;\n}\n\nfunction getParentPathIndices(path) {\n  const parsedPaths = Path.parseFullPath(path);\n  return parsedPaths.slice(0, parsedPaths.length - 1).map(n => typeof n[0] === 'string' ? parseInt(n[0]) : n[0]);\n}","map":{"version":3,"mappings":"AAAA,SAAeA,IAAf,QAA0B,6BAA1B;AAMA,OAAM,SAAUC,eAAV,CAA0BC,QAA1B,EAAwCC,IAAxC,EAAoD;EACxD,MAAMC,OAAO,GAAaC,oBAAoB,CAACF,IAAD,CAA9C;EACA,IAAIG,UAAU,GAAGF,OAAO,CAACG,MAAR,CAAe,CAACC,YAAD,EAAuBC,SAAvB,KAAoC;IAClE,IAAIC,KAAK,CAACC,OAAN,CAAcH,YAAd,CAAJ,EAAiC;MAC/B,OAAOA,YAAY,CAACC,SAAD,CAAnB;IACD,CAFD,MAEO;MACL,OAAOD,YAAY,CAACI,QAAb,CAAsBH,SAAtB,CAAP;IACD;EACF,CANgB,EAMdP,QANc,CAAjB;EAOA,OAAOI,UAAP;AACD;;AAED,SAASD,oBAAT,CAA8BF,IAA9B,EAA0C;EACxC,MAAMU,WAAW,GAAGb,IAAI,CAACc,aAAL,CAAmBX,IAAnB,CAApB;EACA,OAAOU,WAAW,CACfE,KADI,CACE,CADF,EACKF,WAAW,CAACG,MAAZ,GAAqB,CAD1B,EAEJC,GAFI,CAECC,CAAD,IACH,OAAOA,CAAC,CAAC,CAAD,CAAR,KAAgB,QAAhB,GAA2BC,QAAQ,CAACD,CAAC,CAAC,CAAD,CAAF,CAAnC,GAA4CA,CAAC,CAAC,CAAD,CAH1C,CAAP;AAKD","names":["Path","getParentByPath","template","path","indices","getParentPathIndices","parentNode","reduce","templateList","nodeIndex","Array","isArray","children","parsedPaths","parseFullPath","slice","length","map","n","parseInt"],"sources":["/home/fact-11/Desktop/formApp/formapp/node_modules/@steera/form-manager/src/Comp/FormGenerator/Store/Helpers/getParentByPath.ts"],"sourcesContent":["import {Index, Path} from '../../../../Utils/pathUtils';\nimport {TemplateNodeType as T} from '../../../Comp.interface';\nimport {TemplateState as State} from '../Store.interface';\n\ntype TS = State['template'];\n\nexport function getParentByPath(template: TS, path: string): T {\n  const indices: number[] = getParentPathIndices(path);\n  let parentNode = indices.reduce((templateList: T | TS, nodeIndex) => {\n    if (Array.isArray(templateList)) {\n      return templateList[nodeIndex];\n    } else {\n      return templateList.children[nodeIndex];\n    }\n  }, template);\n  return parentNode as T;\n}\n\nfunction getParentPathIndices(path: string) {\n  const parsedPaths = Path.parseFullPath(path);\n  return parsedPaths\n    .slice(0, parsedPaths.length - 1)\n    .map((n: [Index, string]) =>\n      typeof n[0] === 'string' ? parseInt(n[0]) : n[0]\n    );\n}\n"]},"metadata":{},"sourceType":"module"}