{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Selector } from '../Store';\nimport { useAppSelector } from '../StoreProvider';\nimport { ComponentPath } from '../../Comp.interface';\nimport { AddNew, Box, EmailBox, PasswordBox, TextBox, NumberBox, DateBox, RadioBox, CheckBox, SelectBox, Fieldset, Title } from '../RenderComponents';\nimport cn from './FormCanvas.module.scss';\nexport function FormCanvas(props) {\n  const template = useAppSelector(Selector.getTemplate);\n  const isPreview = useAppSelector(Selector.getIsPreview);\n\n  const renderAddNew = c => {\n    return isPreview ? null : _jsx(AddNew, {\n      title: c.title,\n      path: c.path,\n      pathId: c.pathId\n    }, c.path);\n  };\n\n  const renderBox = c => _jsx(Box, Object.assign({\n    path: c.path,\n    title: c.title,\n    pathId: c.pathId,\n    options: c.options\n  }, {\n    children: c.children.map(renderTemplateComponent)\n  }), c.path);\n\n  const renderEmailBox = c => _jsx(EmailBox, {\n    path: c.path,\n    title: c.title,\n    pathId: c.pathId,\n    options: c.options\n  }, c.path);\n\n  const renderTextBox = c => _jsx(TextBox, {\n    path: c.path,\n    title: c.title,\n    pathId: c.pathId,\n    options: c.options\n  }, c.path);\n\n  const renderPasswordBox = c => _jsx(PasswordBox, {\n    path: c.path,\n    title: c.title,\n    pathId: c.pathId,\n    options: c.options\n  }, c.path);\n\n  const renderNumberBox = c => _jsx(NumberBox, {\n    path: c.path,\n    title: c.title,\n    pathId: c.pathId,\n    options: c.options\n  }, c.path);\n\n  const renderDateBox = c => _jsx(DateBox, {\n    path: c.path,\n    title: c.title,\n    pathId: c.pathId,\n    options: c.options\n  }, c.path);\n\n  const renderRadioBox = c => _jsx(RadioBox, {\n    path: c.path,\n    title: c.title,\n    pathId: c.pathId,\n    options: c.options\n  }, c.path);\n\n  const renderCheckBox = c => _jsx(CheckBox, {\n    path: c.path,\n    title: c.title,\n    pathId: c.pathId,\n    options: c.options\n  }, c.path);\n\n  const renderSelectBox = c => _jsx(SelectBox, {\n    path: c.path,\n    title: c.title,\n    pathId: c.pathId,\n    options: c.options\n  }, c.path);\n\n  const renderFieldset = c => _jsx(Fieldset, Object.assign({\n    path: c.path,\n    title: c.title,\n    pathId: c.pathId,\n    options: c.options\n  }, {\n    children: c.children.map(renderTemplateComponent)\n  }), c.path);\n\n  const renderTitle = c => _jsx(Title, {\n    path: c.path,\n    title: c.title,\n    pathId: c.pathId,\n    options: c.options\n  }, c.path);\n\n  const renderTemplateComponent = c => {\n    switch (c.pathId) {\n      case ComponentPath.box:\n        return renderBox(c);\n\n      case ComponentPath.addnew:\n        return renderAddNew(c);\n\n      case ComponentPath.emailbox:\n        return renderEmailBox(c);\n\n      case ComponentPath.textbox:\n        return renderTextBox(c);\n\n      case ComponentPath.passwordbox:\n        return renderPasswordBox(c);\n\n      case ComponentPath.numberbox:\n        return renderNumberBox(c);\n\n      case ComponentPath.datebox:\n        return renderDateBox(c);\n\n      case ComponentPath.radiobox:\n        return renderRadioBox(c);\n\n      case ComponentPath.checkbox:\n        return renderCheckBox(c);\n\n      case ComponentPath.selectbox:\n        return renderSelectBox(c);\n\n      case ComponentPath.fieldset:\n        return renderFieldset(c);\n\n      case ComponentPath.title:\n        return renderTitle(c);\n\n      default:\n        return null;\n    }\n  };\n\n  return _jsx(\"div\", Object.assign({\n    className: cn.card\n  }, {\n    children: _jsx(\"div\", Object.assign({\n      className: cn.canvas\n    }, {\n      children: template.map(renderTemplateComponent)\n    }))\n  }));\n}","map":{"version":3,"mappings":"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","names":["Selector","useAppSelector","ComponentPath","AddNew","Box","EmailBox","PasswordBox","TextBox","NumberBox","DateBox","RadioBox","CheckBox","SelectBox","Fieldset","Title","cn","FormCanvas","props","template","getTemplate","isPreview","getIsPreview","renderAddNew","c","_jsx","title","path","pathId","renderBox","Object","options","children","map","renderTemplateComponent","renderEmailBox","renderTextBox","renderPasswordBox","renderNumberBox","renderDateBox","renderRadioBox","renderCheckBox","renderSelectBox","renderFieldset","renderTitle","box","addnew","emailbox","textbox","passwordbox","numberbox","datebox","radiobox","checkbox","selectbox","fieldset","className","card","canvas"],"sources":["/home/fact-11/Desktop/formApp/formapp/node_modules/@steera/form-manager/src/Comp/FormGenerator/FormCanvas/FormCanvas.tsx"],"sourcesContent":["import React from 'react';\nimport {FormCanvasProps as Props} from './FormCanvas.interface';\n\nimport {Selector} from '../Store';\nimport {useAppSelector} from '../StoreProvider';\nimport {ComponentPath, TemplateNodeType} from '../../Comp.interface';\n\nimport {\n  AddNew,\n  Box,\n  EmailBox,\n  PasswordBox,\n  TextBox,\n  NumberBox,\n  DateBox,\n  RadioBox,\n  CheckBox,\n  SelectBox,\n  Fieldset,\n  Title,\n} from '../RenderComponents';\n\nimport cn from './FormCanvas.module.scss';\n\nexport function FormCanvas(props: Props) {\n  const template = useAppSelector(Selector.getTemplate);\n  const isPreview = useAppSelector(Selector.getIsPreview);\n\n  const renderAddNew = (c: TemplateNodeType) => {\n    return isPreview ? null : (\n      <AddNew key={c.path} title={c.title} path={c.path} pathId={c.pathId} />\n    );\n  };\n\n  const renderBox = (c: TemplateNodeType) => (\n    <Box\n      key={c.path}\n      path={c.path}\n      title={c.title}\n      pathId={c.pathId}\n      options={c.options}>\n      {c.children.map(renderTemplateComponent)}\n    </Box>\n  );\n\n  const renderEmailBox = (c: TemplateNodeType) => (\n    <EmailBox\n      key={c.path}\n      path={c.path}\n      title={c.title}\n      pathId={c.pathId}\n      options={c.options}\n    />\n  );\n\n  const renderTextBox = (c: TemplateNodeType) => (\n    <TextBox\n      key={c.path}\n      path={c.path}\n      title={c.title}\n      pathId={c.pathId}\n      options={c.options}\n    />\n  );\n\n  const renderPasswordBox = (c: TemplateNodeType) => (\n    <PasswordBox\n      key={c.path}\n      path={c.path}\n      title={c.title}\n      pathId={c.pathId}\n      options={c.options}\n    />\n  );\n\n  const renderNumberBox = (c: TemplateNodeType) => (\n    <NumberBox\n      key={c.path}\n      path={c.path}\n      title={c.title}\n      pathId={c.pathId}\n      options={c.options}\n    />\n  );\n\n  const renderDateBox = (c: TemplateNodeType) => (\n    <DateBox\n      key={c.path}\n      path={c.path}\n      title={c.title}\n      pathId={c.pathId}\n      options={c.options}\n    />\n  );\n\n  const renderRadioBox = (c: TemplateNodeType) => (\n    <RadioBox\n      key={c.path}\n      path={c.path}\n      title={c.title}\n      pathId={c.pathId}\n      options={c.options}\n    />\n  );\n\n  const renderCheckBox = (c: TemplateNodeType) => (\n    <CheckBox\n      key={c.path}\n      path={c.path}\n      title={c.title}\n      pathId={c.pathId}\n      options={c.options}\n    />\n  );\n\n  const renderSelectBox = (c: TemplateNodeType) => (\n    <SelectBox\n      key={c.path}\n      path={c.path}\n      title={c.title}\n      pathId={c.pathId}\n      options={c.options}\n    />\n  );\n\n  const renderFieldset = (c: TemplateNodeType) => (\n    <Fieldset\n      key={c.path}\n      path={c.path}\n      title={c.title}\n      pathId={c.pathId}\n      options={c.options}>\n      {c.children.map(renderTemplateComponent)}\n    </Fieldset>\n  );\n\n  const renderTitle = (c: TemplateNodeType) => (\n    <Title\n      key={c.path}\n      path={c.path}\n      title={c.title}\n      pathId={c.pathId}\n      options={c.options}\n    />\n  );\n\n  const renderTemplateComponent = (c: TemplateNodeType) => {\n    switch (c.pathId) {\n      case ComponentPath.box:\n        return renderBox(c);\n      case ComponentPath.addnew:\n        return renderAddNew(c);\n      case ComponentPath.emailbox:\n        return renderEmailBox(c);\n      case ComponentPath.textbox:\n        return renderTextBox(c);\n      case ComponentPath.passwordbox:\n        return renderPasswordBox(c);\n      case ComponentPath.numberbox:\n        return renderNumberBox(c);\n      case ComponentPath.datebox:\n        return renderDateBox(c);\n      case ComponentPath.radiobox:\n        return renderRadioBox(c);\n      case ComponentPath.checkbox:\n        return renderCheckBox(c);\n      case ComponentPath.selectbox:\n        return renderSelectBox(c);\n      case ComponentPath.fieldset:\n        return renderFieldset(c);\n        case ComponentPath.title:\n        return renderTitle(c);\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className={cn.card}>\n      <div className={cn.canvas}>{template.map(renderTemplateComponent)}</div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}