{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Empty } from './Empty';\nimport { Option } from './Option';\nimport { Loading } from './Loading';\n/**\n * Options\n *  Component that decides between what to display\n *   - EmptyMessage\n *   - LoadingMessage\n *   - List<Options>\n */\n\nexport function Options(props) {\n  const {\n    show,\n    options = [],\n    testId,\n    loading = false,\n    optionClass = '',\n    className = ''\n  } = props;\n\n  const renderOption = _a => {\n    var {\n      id,\n      label\n    } = _a,\n        rest = __rest(_a, [\"id\", \"label\"]);\n\n    return _jsx(Option, Object.assign({\n      id: id,\n      label: label,\n      testId: testId,\n      className: optionClass,\n      onSelect: props.onSelect\n    }, rest), rest.value);\n  };\n\n  const renderOptions = () => {\n    if (loading) {\n      return _jsx(Loading, {\n        testId: testId\n      });\n    }\n\n    if (options.length) {\n      return props.options.map(renderOption);\n    } else {\n      return _jsx(Empty, {\n        testId: testId\n      });\n    }\n  };\n\n  const optionsTestId = `${testId}_options`;\n\n  if (show) {\n    return _jsx(\"ul\", Object.assign({\n      className: className,\n      \"data-testid\": optionsTestId\n    }, {\n      children: renderOptions()\n    }));\n  } else {\n    return null;\n  }\n}","map":{"version":3,"mappings":";;;;;;;;;;;;AAIA,SAAQA,KAAR,QAAoB,SAApB;AACA,SAAQC,MAAR,QAAqB,UAArB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA;;;;;;;;AAOA,OAAM,SAAUC,OAAV,CAAkBC,KAAlB,EAA8B;EAClC,MAAM;IACJC,IADI;IAEJC,OAAO,GAAG,EAFN;IAGJC,MAHI;IAIJC,OAAO,GAAG,KAJN;IAKJC,WAAW,GAAG,EALV;IAMJC,SAAS,GAAG;EANR,IAOFN,KAPJ;;EASA,MAAMO,YAAY,GAAIC,EAAD,IAAkD;QAAjD;MAACC,EAAD;MAAKC;IAAL,IAAUF;QAAKG,IAAI,cAAnB,eAAmB;;IAA+B,OACtEC,KAACf,MAAD,EAAOgB;MACLJ,EAAE,EAAEA,EADC;MAGLC,KAAK,EAAEA,KAHF;MAILP,MAAM,EAAEA,MAJH;MAKLG,SAAS,EAAED,WALN;MAMLS,QAAQ,EAAEd,KAAK,CAACc;IANX,GAODH,IAPC,CAAP,EAEOA,IAAI,CAACI,KAFZ,CADsE;EAUvE,CAVD;;EAYA,MAAMC,aAAa,GAAG,MAAK;IACzB,IAAIZ,OAAJ,EAAa;MACX,OAAOQ,KAACd,OAAD,EAAQ;QAACK,MAAM,EAAEA;MAAT,CAAR,CAAP;IACD;;IACD,IAAID,OAAO,CAACe,MAAZ,EAAoB;MAClB,OAAOjB,KAAK,CAACE,OAAN,CAAcgB,GAAd,CAAkBX,YAAlB,CAAP;IACD,CAFD,MAEO;MACL,OAAOK,KAAChB,KAAD,EAAM;QAACO,MAAM,EAAEA;MAAT,CAAN,CAAP;IACD;EACF,CATD;;EAWA,MAAMgB,aAAa,GAAG,GAAGhB,MAAM,UAA/B;;EAEA,IAAIF,IAAJ,EAAU;IACR,OACEW;MAAIN,SAAS,EAAEA,SAAf;MAAwB,eAAea;IAAvC,GAAoD;MAAAC,UACjDJ,aAAa;IADoC,CAApD,EADF;EAKD,CAND,MAMO;IACL,OAAO,IAAP;EACD;AACF","names":["Empty","Option","Loading","Options","props","show","options","testId","loading","optionClass","className","renderOption","_a","id","label","rest","_jsx","Object","onSelect","value","renderOptions","length","map","optionsTestId","children"],"sources":["/home/fact-11/Desktop/formApp/formapp/node_modules/@steera/form-manager/src/Components/Select/Options/Options.tsx"],"sourcesContent":["import * as React from 'react';\nimport {OptionsProps as Props} from './Options.interface';\nimport {Option as OptionType} from '../Select.interface';\n\nimport {Empty} from './Empty';\nimport {Option} from './Option';\nimport {Loading} from './Loading';\n\n/**\n * Options\n *  Component that decides between what to display\n *   - EmptyMessage\n *   - LoadingMessage\n *   - List<Options>\n */\nexport function Options(props: Props): JSX.Element | null {\n  const {\n    show,\n    options = [],\n    testId,\n    loading = false,\n    optionClass = '',\n    className = '',\n  } = props;\n\n  const renderOption = ({id, label, ...rest}: OptionType): JSX.Element => (\n    <Option\n      id={id}\n      key={rest.value}\n      label={label}\n      testId={testId}\n      className={optionClass}\n      onSelect={props.onSelect}\n      {...rest}\n    />\n  );\n\n  const renderOptions = () => {\n    if (loading) {\n      return <Loading testId={testId} />;\n    }\n    if (options.length) {\n      return props.options.map(renderOption);\n    } else {\n      return <Empty testId={testId} />;\n    }\n  };\n\n  const optionsTestId = `${testId}_options`;\n\n  if (show) {\n    return (\n      <ul className={className} data-testid={optionsTestId}>\n        {renderOptions()}\n      </ul>\n    );\n  } else {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}