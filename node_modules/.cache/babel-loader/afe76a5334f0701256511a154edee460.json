{"ast":null,"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nimport React from 'react';\nimport { Password } from '../Password';\nimport { Label } from '../Label';\nimport { Hint } from '../Hint';\nimport { getOnKey, KEY } from '../../Utils/commonUtils';\nimport cn from './PasswordBox.module.scss';\nexport function PasswordBox(props) {\n  const [valid, setValid] = React.useState(true);\n  const onEnterKey = getOnKey(KEY.ENTER);\n\n  const getClassName = function () {\n    let ele = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return `${cn[`pbox${ele}`]} ${props.className}${ele}`;\n  };\n\n  const onKeyUp = e => {\n    if (props.onKeyUp) props.onKeyUp(e);\n    onEnterKey(() => {\n      if (props.onEnterKey) props.onEnterKey(e);\n    }, e);\n  };\n\n  const onBlur = e => {\n    const {\n      validity\n    } = e.target;\n    setValid(validity.valid);\n    if (props.onBlur) props.onBlur(e);\n  };\n\n  const getHintShow = () => {\n    if (props.isSubmitted) {\n      return !valid;\n    } else return false;\n  };\n\n  return _jsxs(\"div\", Object.assign({\n    className: getClassName()\n  }, {\n    children: [_jsx(Label, {\n      for: props.id,\n      text: props.label,\n      required: props.required,\n      className: getClassName('_label')\n    }), _jsx(Password, {\n      id: props.id,\n      name: props.name,\n      value: props.value,\n      defaultValue: props.defaultValue,\n      pattern: props.pattern,\n      minLength: props.minLength,\n      maxLength: props.maxLength,\n      className: getClassName('_input'),\n      disabled: props.disabled,\n      required: props.required,\n      onChange: props.onChange,\n      onBlur: onBlur,\n      onFocus: props.onFocus,\n      onKeyUp: onKeyUp,\n      placeholder: props.placeholder\n    }), _jsx(Hint, {\n      show: getHintShow(),\n      message: props.invalidInputMessage,\n      className: getClassName('_hint')\n    })]\n  }));\n}","map":{"version":3,"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAGA,SAAQC,QAAR,QAAuB,aAAvB;AACA,SAAQC,KAAR,QAAoB,UAApB;AACA,SAAQC,IAAR,QAAmB,SAAnB;AACA,SAAQC,QAAR,EAAkBC,GAAlB,QAA4B,yBAA5B;AAEA,OAAOC,EAAP,MAAe,2BAAf;AAEA,OAAM,SAAUC,WAAV,CAAsBC,KAAtB,EAAkC;EACtC,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,KAAK,CAACW,QAAN,CAAe,IAAf,CAA1B;EAEA,MAAMC,UAAU,GAAGR,QAAQ,CAACC,GAAG,CAACQ,KAAL,CAA3B;;EAEA,MAAMC,YAAY,GAAG;IAAA,IAACC,GAAD,uEAAO,EAAP;IAAA,OACnB,GAAGT,EAAE,CAAC,OAAOS,GAAG,EAAX,CAAc,IAAIP,KAAK,CAACQ,SAAS,GAAGD,GAAG,EADzB;EAAA,CAArB;;EAGA,MAAME,OAAO,GAAsBC,CAAD,IAAM;IACtC,IAAIV,KAAK,CAACS,OAAV,EAAmBT,KAAK,CAACS,OAAN,CAAcC,CAAd;IACnBN,UAAU,CAAC,MAAK;MACd,IAAIJ,KAAK,CAACI,UAAV,EAAsBJ,KAAK,CAACI,UAAN,CAAiBM,CAAjB;IACvB,CAFS,EAEPA,CAFO,CAAV;EAGD,CALD;;EAOA,MAAMC,MAAM,GAAqBD,CAAD,IAAM;IACpC,MAAM;MAACE;IAAD,IAAaF,CAAC,CAACG,MAArB;IACAX,QAAQ,CAACU,QAAQ,CAACX,KAAV,CAAR;IACA,IAAID,KAAK,CAACW,MAAV,EAAkBX,KAAK,CAACW,MAAN,CAAaD,CAAb;EACnB,CAJD;;EAMA,MAAMI,WAAW,GAAG,MAAc;IAChC,IAAId,KAAK,CAACe,WAAV,EAAuB;MACrB,OAAO,CAACd,KAAR;IACD,CAFD,MAEO,OAAO,KAAP;EACR,CAJD;;EAMA,OACEe;IAAKR,SAAS,EAAEF,YAAY;EAA5B,GAA8B;IAAAW,WAC5BC,KAACxB,KAAD,EAAM;MACJyB,GAAG,EAAEnB,KAAK,CAACoB,EADP;MAEJC,IAAI,EAAErB,KAAK,CAACsB,KAFR;MAGJC,QAAQ,EAAEvB,KAAK,CAACuB,QAHZ;MAIJf,SAAS,EAAEF,YAAY,CAAC,QAAD;IAJnB,CAAN,CAD4B,EAO5BY,KAACzB,QAAD,EAAS;MACP2B,EAAE,EAAEpB,KAAK,CAACoB,EADH;MAEPI,IAAI,EAAExB,KAAK,CAACwB,IAFL;MAGPC,KAAK,EAAEzB,KAAK,CAACyB,KAHN;MAIPC,YAAY,EAAE1B,KAAK,CAAC0B,YAJb;MAKPC,OAAO,EAAE3B,KAAK,CAAC2B,OALR;MAMPC,SAAS,EAAE5B,KAAK,CAAC4B,SANV;MAOPC,SAAS,EAAE7B,KAAK,CAAC6B,SAPV;MAQPrB,SAAS,EAAEF,YAAY,CAAC,QAAD,CARhB;MASPwB,QAAQ,EAAE9B,KAAK,CAAC8B,QATT;MAUPP,QAAQ,EAAEvB,KAAK,CAACuB,QAVT;MAWPQ,QAAQ,EAAE/B,KAAK,CAAC+B,QAXT;MAYPpB,MAAM,EAAEA,MAZD;MAaPqB,OAAO,EAAEhC,KAAK,CAACgC,OAbR;MAcPvB,OAAO,EAAEA,OAdF;MAePwB,WAAW,EAAEjC,KAAK,CAACiC;IAfZ,CAAT,CAP4B,EAwB5Bf,KAACvB,IAAD,EAAK;MACHuC,IAAI,EAAEpB,WAAW,EADd;MAEHqB,OAAO,EAAEnC,KAAK,CAACoC,mBAFZ;MAGH5B,SAAS,EAAEF,YAAY,CAAC,OAAD;IAHpB,CAAL,CAxB4B;EAAA,CAA9B,EADF;AAgCD","names":["React","Password","Label","Hint","getOnKey","KEY","cn","PasswordBox","props","valid","setValid","useState","onEnterKey","ENTER","getClassName","ele","className","onKeyUp","e","onBlur","validity","target","getHintShow","isSubmitted","_jsxs","children","_jsx","for","id","text","label","required","name","value","defaultValue","pattern","minLength","maxLength","disabled","onChange","onFocus","placeholder","show","message","invalidInputMessage"],"sources":["/home/fact-11/Desktop/formApp/formapp/node_modules/@steera/form-manager/src/Components/PasswordBox/PasswordBox.tsx"],"sourcesContent":["import React from 'react';\nimport {PasswordBoxProps as Props} from './PasswordBox.interface';\n\nimport {Password} from '../Password';\nimport {Label} from '../Label';\nimport {Hint} from '../Hint';\nimport {getOnKey, KEY} from '../../Utils/commonUtils';\n\nimport cn from './PasswordBox.module.scss';\n\nexport function PasswordBox(props: Props) {\n  const [valid, setValid] = React.useState(true);\n\n  const onEnterKey = getOnKey(KEY.ENTER);\n\n  const getClassName = (ele = '') =>\n    `${cn[`pbox${ele}`]} ${props.className}${ele}`;\n\n  const onKeyUp: Props['onKeyUp'] = (e) => {\n    if (props.onKeyUp) props.onKeyUp(e);\n    onEnterKey(() => {\n      if (props.onEnterKey) props.onEnterKey(e);\n    }, e);\n  };\n\n  const onBlur: Props['onBlur'] = (e) => {\n    const {validity} = e.target as HTMLInputElement;\n    setValid(validity.valid);\n    if (props.onBlur) props.onBlur(e);\n  };\n\n  const getHintShow = (): boolean => {\n    if (props.isSubmitted) {\n      return !valid;\n    } else return false;\n  };\n\n  return (\n    <div className={getClassName()}>\n      <Label\n        for={props.id}\n        text={props.label}\n        required={props.required}\n        className={getClassName('_label')}\n      />\n      <Password\n        id={props.id}\n        name={props.name}\n        value={props.value}\n        defaultValue={props.defaultValue}\n        pattern={props.pattern}\n        minLength={props.minLength}\n        maxLength={props.maxLength}\n        className={getClassName('_input')}\n        disabled={props.disabled}\n        required={props.required}\n        onChange={props.onChange}\n        onBlur={onBlur}\n        onFocus={props.onFocus}\n        onKeyUp={onKeyUp}\n        placeholder={props.placeholder}\n      />\n      <Hint\n        show={getHintShow()}\n        message={props.invalidInputMessage}\n        className={getClassName('_hint')}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}